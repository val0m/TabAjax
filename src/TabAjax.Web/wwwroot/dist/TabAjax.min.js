$.fn.hasAttr = function (name) {
    return this.attr(name) !== undefined;
};
var scriptLoad = false;

$(document).ready(function () {
    LibraryReload('#body');
});
$(document).ajaxStop(function () {
    if (scriptLoad === false) { LibraryReload(); }
});

function LibraryReload(selector) {
    var elemLibraryReload = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemLibraryReload = $(selector);
        }
        else if (isElement(document.getElementById(selector))) {
            elemLibraryReload = $('#' + selector)
        }
    }
    else if (isElement(selector)) { elemLibraryReload = selector; }
    else { elemLibraryReload = $('#body-page'); }

    if (isElement(elemLibraryReload)) {
        baseLoad(elemLibraryReload);

        //if (typeof datetimepickerLoad === "function") { datetimepickerLoad(elemLibraryReload); }
        //if (typeof bootstrapLoad === "function") { bootstrapLoad(elemLibraryReload); }
        //if (typeof bootstrapSwitchLoad === "function") { bootstrapSwitchLoad(elemLibraryReload); }
        //if (typeof bootstrapSelectLoad === "function") { bootstrapSelectLoad(elemLibraryReload); }
        //if (typeof bootstrapTagsLoad === "function") { bootstrapTagsLoad(elemLibraryReload); }
        //if (typeof treeGridLoad === "function") { treeGridLoad(elemLibraryReload); }
        //if (typeof ckeditorLoad === "function") { ckeditorLoad(elemLibraryReload); }
        //if (typeof fixedHeaderTableLoad === "function") { fixedHeaderTableLoad(elemLibraryReload); }

        scriptLoad = true;
    }
}
function baseLoad(selector) {

    var elemBaseLoad = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemBaseLoad = $(selector);
        }
        else if (isElement(document.getElementById(selector))) {
            elemBaseLoad = $('#' + selector)
        }
    }
    else if (isElement(selector)) { elemBaseLoad = selector; }
    else { elemBaseLoad = $(''); }

    if (isElement(elemBaseLoad)) {
        // Génère les champs falcutatif d'un formulaire
        $(elemBaseLoad).find('label[falcutatif]').each(function () {
            var id = "falcutatif_" + $(this).attr('for');

            var value = false;
            if ($(this).hasAttr('falcutatif') && $(this).attr('falcutatif') === 'true') { value = true; }

            if (!$(this).find('input[type="checkbox"]').length) {
                var label = $('<label for="' + id + '" style="float:right;font-weight:normal;">activé </label>');
                var checkbox = $('<input type="checkbox" name="falcutatif" id="' + id + '" style="margin-top:0px;" />');
                label.append(checkbox);
                $(this).append(label);
                $(this).attr('for', id);

                $(this).find('input[name=falcutatif]').prop('checked', value);
                $(this).find('input[name=falcutatif]').change();
            }
        });
        // Génère les champs obligatoires d'un formulaire
        $(elemBaseLoad).find('div.form-group').each(function () {
            if ($(this).find(':input[data-val-required]:not([type=hidden])').length && $(this).find('label').length && !$(this).find('i[name="required"]').length && !$(this).find(':input[data-val="false"]').length) {
                var iconRequired = $('<i name="required" style="margin-left:5px;" class="color-rouge fa fa-dot-circle-o" data-toggle="tooltip" data-placement="top" title="Obligatoire"></i>');
                $(this).find('label').first().append(iconRequired);
            }
        });
    }

}
// Returns last index of string
String.prototype.indexOfEnd = function (string) {
    var io = this.indexOf(string);
    return io == -1 ? -1 : io + string.length;
}
// Returns if a value is a string
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
// Returns if a value is really a number
function isNumber(value) {
    return typeof value === 'number' && isFinite(value);
}
// Returns if a value is really a numeric
function isNumeric(num) {
    return !isNaN(num);
}
// Returns if a value is an array
function isArray(value) {
    return value && typeof value === 'object' && value.constructor === Array;
}
// Returns if a value is an object
function isObject(value) {
    return value && typeof value === 'object' && value.constructor === Object;
}
// Returns if a value is null
function isNull(value) {
    return value === null;
}
// Returns if a value is null
function isEmpty(value) {
    return value === '';
}
// Returns if a value is undefined
function isUndefined(value) {
    return typeof value === 'undefined';
}
// Returns if a value is null, empty or undefined
function isNullOrEmpty(value) {
    return isNull(value) || isUndefined(value) || isEmpty(value) || (isArray(value) && value.length == 0);
}
// Returns if a value is a boolean
function isBoolean(value) {
    return typeof value === 'boolean';
}
// Returns if a value is a boolean string or boolean int
// === Updated : 07/02/2020 à 10:00 - PASSE Valentin ===
function isBooleanVirtual(value) {
    return ((isString(value) && (value === 'true' || value === 'True' || value === 'false' || value === 'False'))
        || (isNumber(value) && (value === 1 || value === 0)));
}
// Returns if a value is a regexp
function isRegExp(value) {
    return value && typeof value === 'object' && value.constructor === RegExp;
}
// Returns if value is an error object
function isError(value) {
    return value instanceof Error && typeof value.message !== 'undefined';
}
// Returns if value is a date object
function isDate(value) {
    return value instanceof Date && !isNaN(value);
}
// Returns if a Symbol
function isSymbol(value) {
    return typeof value === 'symbol';
}
// Returns if a DOM element
function isElement(value) {
    return !isNullOrEmpty(value)
        && $(value).length;
}

function formatMillier(nombre) {
    nombre += '';
    var sep = ' ';
    var reg = /(\d+)(\d{3})/;
    while (reg.test(nombre)) {
        nombre = nombre.replace(reg, '$1' + sep + '$2');
    }
    return nombre;
}
function CurrencyFormatted(amount) {
    var i = parseFloat(amount);
    if (isNaN(i)) { i = 0.00; }
    var minus = '';
    if (i < 0) { minus = '-'; }
    i = Math.abs(i);
    i = parseInt((i + .005) * 100);
    i = i / 100;

    s = new String(formatMillier(i));
    if (s.indexOf('.') < 0) { s += ',00'; }
    if (s.indexOf('.') === (s.length - 2)) { s += '0'; }
    s = minus + s;
    s = s.replace(".", ",");
    return s;
}

// Dates format
var dateFormat = function () {
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d: d,
                dd: pad(d),
                ddd: dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m: m + 1,
                mm: pad(m + 1),
                mmm: dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy: String(y).slice(2),
                yyyy: y,
                h: H % 12 || 12,
                hh: pad(H % 12 || 12),
                H: H,
                HH: pad(H),
                M: M,
                MM: pad(M),
                s: s,
                ss: pad(s),
                l: pad(L, 3),
                L: pad(L > 99 ? Math.round(L / 10) : L),
                t: H < 12 ? "a" : "p",
                tt: H < 12 ? "am" : "pm",
                T: H < 12 ? "A" : "P",
                TT: H < 12 ? "AM" : "PM",
                Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    "default": "ddd mmm dd yyyy HH:MM:ss",
    shortDate: "m/d/yy",
    mediumDate: "mmm d, yyyy",
    longDate: "mmmm d, yyyy",
    fullDate: "dddd, mmmm d, yyyy",
    shortTime: "h:MM TT",
    mediumTime: "h:MM:ss TT",
    longTime: "h:MM:ss TT Z",
    isoDate: "yyyy-mm-dd",
    isoTime: "HH:MM:ss",
    isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};
function ParseDate(input, separator) {
    if (separator === undefined) {
        separator = '-';
    }
    var parts = input.split(separator);
    var string = parts[1] + '-' + parts[0] + '-' + parts[2];
    return new Date(string);
}
// Returns if a element has attribute html
$.fn.hasAttrTabajaxHtml = function (withId) {
    if (withId === undefined) {
        withId = true;
    }
    return this.hasAttr('tabajaxHtml')
        || this.hasAttr('tabajax-html')
        || (withId === true && this.hasAttr('id'));
};
// Returns element attribute html
$.fn.attrTabajaxHtml = function (withId) {
    if (withId === undefined) {
        withId = true;
    }
    if (this.hasAttr('tabajaxHtml')) { return this.attr('tabajaxHtml'); }
    else if (this.hasAttr('tabajax-html')) { return this.attr('tabajax-html'); }
    else if (withId === true && this.hasAttr('id')) { return '[id=' + this.attr('id') + ']'; }
    return undefined;
};

// Returns if a element has attribute URL
// === Updated : 14/02/2020 à 11:30 - PASSE Valentin ===
$.fn.hasAttrTabajaxUrl = function () {
    return this.hasAttr('href')
        || this.hasAttr('tabajaxUrl')
        || this.hasAttr('tabajax-url')
        || this.hasAttr('data-url')
        || this.hasAttr('action');
};
// Returns element attribute URL
// === Updated : 14/02/2020 à 11:30 - PASSE Valentin ===
$.fn.attrTabajaxUrl = function () {
    if (this.hasAttr('href')) { return this.attr('href'); }
    else if (this.hasAttr('tabajaxUrl')) { return this.attr('tabajaxUrl'); }
    else if (this.hasAttr('tabajax-url')) { return this.attr('tabajax-url'); }
    else if (this.hasAttr('data-url')) { return this.attr('data-url'); }
    else if (this.hasAttr('action')) { return this.attr('action'); }
    return undefined;
};

// Returns if a element has attribute type result
$.fn.hasAttrTabajaxResult = function () {
    return this.hasAttr('tabajaxResult')
        || this.hasAttr('tabajax-result')
        || this.hasAttr('tabajaxType')
        || this.hasAttr('tabajax-type');
};
// Returns element attribute type result
$.fn.attrTabajaxResult = function () {
    var typeResult = undefined;
    if (this.hasAttr('tabajaxResult')) { typeResult = this.attr('tabajaxResult').toUpperCase(); }
    else if (this.hasAttr('tabajax-result')) { typeResult = this.attr('tabajax-result').toUpperCase(); }
    else if (this.hasAttr('tabajaxType')) { typeResult = this.attr('tabajaxType').toUpperCase(); }
    else if (this.hasAttr('tabajax-type')) { typeResult = this.attr('tabajax-type').toUpperCase(); }

    if (!isUndefined(typeResult)) {
        return Object.keys(EnumResult).filter(function (x) { return x === typeResult; })[0];
    }
    return undefined;
};

// Returns if a element has attribute Reload
$.fn.hasAttrTabajaxReload = function () {
    return this.hasAttr('tabajaxReload')
        || this.hasAttr('tabajax-reload');
};
// Returns element attribute Reload
$.fn.attrTabajaxReload = function () {
    if (this.hasAttr('tabajaxReload')) { return this.attr('tabajaxReload'); }
    else if (this.hasAttr('tabajax-reload')) { return this.attr('tabajax-reload'); }
    return undefined;
};

// Returns if a element has attribute Filter
$.fn.hasAttrTabajaxFilter = function () {
    return this.hasAttr('tabajaxFilter')
        || this.hasAttr('tabajax-filter');
};
// Returns element attribute Filter
$.fn.attrTabajaxFilter = function () {
    if (this.hasAttr('tabajaxFilter')) { return this.attr('tabajaxFilter'); }
    else if (this.hasAttr('tabajax-filter')) { return this.attr('tabajax-filter'); }
    return undefined;
};

// Returns if a element has attribute Filter Times
// === Created : 10/02/2020 à 08:50 - PASSE Valentin ===
$.fn.hasAttrTabajaxFilterTimes = function () {
    return this.hasAttr('tabajaxFilterTimes')
        || this.hasAttr('tabajax-filterTimes');
};
// Returns element attribute Filter Times
// === Created : 10/02/2020 à 08:50 - PASSE Valentin ===
$.fn.attrTabajaxFilterTimes = function () {
    if (this.hasAttr('tabajaxFilterTimes')) { return this.attr('tabajaxFilterTimes'); }
    else if (this.hasAttr('tabajax-filterTimes')) { return this.attr('tabajax-filterTimes'); }
    return undefined;
};

// Returns if a element has attribute Filter Load
$.fn.hasAttrTabajaxFilterLoad = function () {
    return this.hasAttr('tabajaxFilterLoad')
        || this.hasAttr('tabajax-filterLoad');
};
// Returns element attribute Filter Load
$.fn.attrTabajaxFilterLoad = function () {
    if (this.hasAttr('tabajaxFilterLoad')) { return this.attr('tabajaxFilterLoad'); }
    else if (this.hasAttr('tabajax-filterLoad')) { return this.attr('tabajax-filterLoad'); }
    return undefined;
};

// Returns if a element has attribute Bloc
$.fn.hasAttrTabajaxBloc = function () {
    return this.hasAttr('tabajaxBloc')
        || this.hasAttr('tabajax-bloc');
};
// Returns element attribute Bloc
$.fn.attrTabajaxBloc = function () {
    if (this.hasAttr('tabajaxBloc')) { return this.attr('tabajaxBloc'); }
    else if (this.hasAttr('tabajax-bloc')) { return this.attr('tabajax-bloc'); }
    return undefined;
};

// Returns if a element has attribute Action
$.fn.hasAttrTabajaxAction = function () {
    return this.hasAttr('tabajaxAction')
        || this.hasAttr('tabajax-action');
};
// Returns element attribute Action
$.fn.attrTabajaxAction = function () {
    if (this.hasAttr('tabajaxAction')) { return this.attr('tabajaxAction'); }
    else if (this.hasAttr('tabajax-action')) { return this.attr('tabajax-action'); }
    return undefined;
};

// Returns if a element has attribute Ready
$.fn.hasAttrTabajaxReady = function () {
    return this.hasAttr('tabajaxReady')
        || this.hasAttr('tabajax-ready');
};
// Returns element attribute Ready
$.fn.attrTabajaxReady = function () {
    if (this.hasAttr('tabajaxReady')) { return this.attr('tabajaxReady'); }
    else if (this.hasAttr('tabajax-ready')) { return this.attr('tabajax-ready'); }
    return undefined;
};

// Returns if a element has attribute Submit
$.fn.hasAttrTabajaxSubmit = function () {
    return this.hasAttr('tabajaxSubmit')
        || this.hasAttr('tabajax-submit');
};
// Returns element attribute Submit
$.fn.attrTabajaxSubmit = function () {
    if (this.hasAttr('tabajaxSubmit')) { return this.attr('tabajaxSubmit'); }
    else if (this.hasAttr('tabajax-submit')) { return this.attr('tabajax-submit'); }
    return undefined;
};

// Returns if a element has attribute Change Url
$.fn.hasAttrTabajaxChangeUrl = function () {
    return this.hasAttr('tabajaxChangeUrl')
        || this.hasAttr('tabajax-changeUrl')
        || this.hasAttr('tabajaxUrlChange')
        || this.hasAttr('tabajax-urlChange');
};
// Returns element attribute Change Url
$.fn.attrTabajaxChangeUrl = function () {
    if (this.hasAttr('tabajaxChangeUrl')) { return this.attr('tabajaxChangeUrl'); }
    else if (this.hasAttr('tabajax-changeUrl')) { return this.attr('tabajax-changeUrl'); }
    else if (this.hasAttr('tabajaxUrlChange')) { return this.attr('tabajaxUrlChange'); }
    else if (this.hasAttr('tabajax-urlChange')) { return this.attr('tabajax-urlChange'); }
    return undefined;
};

// Returns if a element has attribute Change Parameter
$.fn.hasAttrTabajaxChangeParameter = function () {
    return this.hasAttr('tabajaxChangeParameter')
        || this.hasAttr('tabajax-changeParameter')
        || this.hasAttr('tabajaxParameterChange')
        || this.hasAttr('tabajax-parameterChange');
};
// Returns element attribute Change Parameter
$.fn.attrTabajaxChangeParameter = function () {
    if (this.hasAttr('tabajaxChangeParameter')) { return this.attr('tabajaxChangeParameter'); }
    else if (this.hasAttr('tabajax-changeParameter')) { return this.attr('tabajax-changeParameter'); }
    else if (this.hasAttr('tabajaxParameterChange')) { return this.attr('tabajaxParameterChange'); }
    else if (this.hasAttr('tabajax-parameterChange')) { return this.attr('tabajax-parameterChange'); }
    return undefined;
};

// ======================================================================================================================================================== //
// tabajax-display //
// ======================================================================================================================================================== //

// --- Reglages bloc display : affiche certains éléments --- 
// - affiche -
$('body').on('click', '[tabajax-display]', function (event) {
    event.preventDefault ? event.preventDefault() : (event.returnValue = false);

    if ($('[tabajax-ondisplay="' + $(this).attr('tabajax-display') + '"').first().is(":visible")) {
        if ($(this).children('i').length && $(this).hasAttr('tabajax-display-off')) {
            $(this).children('i').first().attr('class', $(this).attr('tabajax-display-off'));
        }
        $('[tabajax-ondisplay="' + $(this).attr('tabajax-display') + '"').each(function () {
            $(this).hide(400);
            if ($(this).hasAttr('tabajax-display-url')) {
                $(this).empty();
            }
        });
    }
    else {
        if ($(this).children('i').length && $(this).hasAttr('tabajax-display-on')) {
            $(this).children('i').first().attr('class', $(this).attr('tabajax-display-on'));
        }
        $('[tabajax-ondisplay="' + $(this).attr('tabajax-display') + '"').each(function () {
            if ($(this).hasAttr('tabajax-display-url')) {
                displayView($(this));
            }
            else {
                $(this).show(400);
            }
        });
    }
});
$('body').on('click', '[tabajax-display-all-on]', function (event) {
    event.preventDefault ? event.preventDefault() : (event.returnValue = false);

    if ($(this).children('i').length && $(this).hasAttr('tabajax-display-on')) {
        $(this).children('i').first().attr('class', $(this).attr('tabajax-display-on'));
    }
    $('[tabajax-ondisplay*="' + $(this).attr('tabajax-display-all-on') + '"').each(function () {
        if ($(this).hasAttr('tabajax-display-url')) {
            displayView($(this));
        }
        else {
            $(this).show(400);
        }
    });
});
$('body').on('click', '[tabajax-display-all-off]', function (event) {
    event.preventDefault ? event.preventDefault() : (event.returnValue = false);

    if ($(this).children('i').length && $(this).hasAttr('tabajax-display-off')) {
        $(this).children('i').first().attr('class', $(this).attr('tabajax-display-off'));
    }
    $('[tabajax-ondisplay*="' + $(this).attr('tabajax-display-all-off') + '"').each(function () {
        $(this).hide(400);
        if ($(this).hasAttr('tabajax-display-url')) {
            $(this).empty();
        }
    });
});

// ======================================================================================================================================================== //
// tabajax-display-source //
// ======================================================================================================================================================== //

// Génère les display source en fonction des choix déjà selectionné
$('body').on('change', 'select:not([disabled]),input[type="checkbox"]:not([disabled]),input[type="radio"]:checked:not([disabled])', function (event) {
    var id = $(this).attr('id');
    if (id !== undefined && id !== "" && !$(this).hasAttr('tabajax-display-onloading')) {
        $('[tabajax-display-source]').filter(
            function (index) {
                return $(this).attr('tabajax-display-source').split(',').includes(id);
            }).each(function () { // Boucle sur tous les items possedant le 'display-source'
                displaySource(this);
            });
    }
});

$('body').on('focusout', 'input[type="text"]:not([switch]):not([disabled]),textarea[type="text"]:not([disabled])', function (event, state) {
    var id = $(this).attr('id');
    if (id !== undefined && id !== "" && !$(this).hasAttr('tabajax-display-onloading')) {
        $('[tabajax-display-source]').filter(
            function (index) {
                return $(this).attr('tabajax-display-source').split(',').includes(id);
            }).each(function () { // Boucle sur tous les items possedant le 'display-source'
                displaySource(this);
            });
    }
});
$('body').on('keyup', 'input[type="text"]:not([switch]):not([disabled]),textarea[type="text"]:not([disabled])', function (event, state) {
    var id = $(this).attr('id');
    if (id !== undefined && id !== "" && !$(this).hasAttr('tabajax-display-onloading')) {
        $('[tabajax-display-source]').filter(
            function (index) {
                return $(this).attr('tabajax-display-source').split(',').includes(id);
            }).each(function () { // Boucle sur tous les items possedant le 'display-source'
                displaySource(this);
            });
    }
});
// Génère les display source en fonction des choix déjà selectionné
$('body').on('change', 'select[tabajax-display-view][tabajax-display-url]', function (event) {
    var id = $(this).attr('id');
    var value = $('#' + id + ' option:selected').val();

    if ($(this).hasAttr('tabajax-display-view') && $(this).attr('tabajax-display-view') !== '' && $(this).attr('tabajax-display-view') !== null && $(this).attr('tabajax-display-view') !== undefined && !$(this).hasAttr('tabajax-display-onloading')) {
        if ($(this).hasAttr('tabajax-display-url') && $(this).hasAttr('tabajax-display-parameter')) {
            if ($(this).attr('tabajax-display-url').indexOf('?') >= 0) {
                $(this).attr('tabajax-display-url', $(this).attr('tabajax-display-url') + '&' + $(this).attr('tabajax-display-parameter') + '=' + value);
            }
            else {
                $(this).attr('tabajax-display-url', $(this).attr('tabajax-display-url') + '?' + $(this).attr('tabajax-display-parameter') + '=' + value);
            }
        }
        displayView(this);
    }
});
// Génère les display view en fonction des choix déjà selectionné
$('body').on('click', 'a[tabajax-display-view],button[tabajax-display-view],li[tabajax-display-view]', function (event) {
    if ($(this).hasAttr('tabajax-display-view') && $(this).attr('tabajax-display-view') !== '' && $(this).attr('tabajax-display-view') !== null && $(this).attr('tabajax-display-view') !== undefined && !$(this).hasAttr('tabajax-display-onloading')) {
        displayView(this);
    }
});

function TabajaxDisplayLoad() {
    $('[tabajax-display-source]').each(function () {
        var item = $(this);
        if ($(item).hasAttr('tabajax-display-onloading')) { return false; }

        var arraySource = $(item).attr('tabajax-display-source').split(','); // Array de toutes les sources de l'item

        for (var sourceId in arraySource) {
            var source = $('#' + arraySource[sourceId]);

            if (isElement(source)) {
                displaySource(item);
            }
        }
    });
}

function displaySource(item) {
    if ($(item).length && $(item).hasAttr('tabajax-display-source')) {
        var isDisplay = true;
        var arraySource = $(item).attr('tabajax-display-source').split(','); // Array de toutes les sources de l'item
        for (var sourceId in arraySource) {
            var isDisplaySource = false;

            var id = arraySource[sourceId];
            var source = $('#' + id);

            // Get les valeurs de la source
            var value = undefined;
            var text = undefined;
            if ($(source).is('select')) {
                value = $('#' + id + ' option:selected').val();
                text = $('#' + id + ' option:selected').text();
            }
            else if ($(source).is('[type="checkbox"]')) {
                value = $(source).is(":checked").toString();
                text = value;
            }
            else if ($(source).is('[type="text"]')
                || $(source).is('[type="radio"]:checked')) {
                value = $(source).val();
                text = value;
            }

            arraySource[sourceId][1] = value;
            arraySource[sourceId][2] = text;

            if ($(item).hasAttr('tabajax-display-' + id + '-text') || $(item).hasAttr('tabajax-display-' + id + '-value')) { // Check si l'attribut text ou value existe

                if ($(item).hasAttr('tabajax-display-' + id + '-text')) {

                    var arrayListText = $(item).attr('tabajax-display-' + id + '-text').split(',');
                    for (var arr in arrayListText) { // définis si l'item selectionné correspond à l'item recherché 
                        if (arrayListText[arr].toLowerCase() === text.toLowerCase()
                            || (arrayListText[arr].substring(1) === "%" && arrayListText[arr].substring(arrayListText[arr].length - 1) === "%" && arrayListText[arr].toLowerCase().indexOf(text.toLowerCase()) !== -1)
                            || (arrayListText[arr].substring(1) === "%" && arrayListText[arr].toLowerCase().endsWith(text))
                            || (arrayListText[arr].substring(arrayListText[arr].length - 1) === "%" && arrayListText[arr].toLowerCase().startsWith(text))) { isDisplaySource = true; }
                    }

                }
                if ($(item).hasAttr('tabajax-display-' + id + '-value')) {

                    var arrayListValue = $(item).attr('tabajax-display-' + id + '-value').split(',');
                    for (var arr in arrayListValue) { // définis si l'item selectionné correspond à l'item recherché 
                        if (arrayListValue[arr].toLowerCase() === value.toLowerCase()
                            || (arrayListValue[arr].substring(1) === "%" && arrayListValue[arr].substring(arrayListValue[arr].length - 1) === "%" && arrayListValue[arr].toLowerCase().indexOf(value.toLowerCase()) !== -1)
                            || (arrayListValue[arr].substring(1) === "%" && arrayListValue[arr].toLowerCase().endsWith(value.toLowerCase()))
                            || (arrayListValue[arr].substring(arrayListValue[arr].length - 1) === "%" && arrayListValue[arr].toLowerCase().startsWith(value.toLowerCase()))) { isDisplaySource = true; }
                    }

                }
            }
            else { isDisplaySource = false; }

            if (isDisplay) { isDisplay = isDisplaySource; } // Check si l'element a déjà eu une source en False, sinon remplace la source actuelle à l'element général
        } // fin de boucle Source

        if ($(item).hasAttr('tabajax-display-url') && !$(item).hasAttr('tabajax-display-onloading')) {
            if (!$(item).hasAttr('tabajax-display-view') || $(item).hasAttr('tabajax-display-view') === '') {
                $(item).attr('tabajax-display-view', $(item).attr('id'));
            }
            var url = $(item).attr('tabajax-display-url');
            if (url.indexOf("?") === -1) { url = url + '?' }
            else { url = url + '&' }

            for (var sourceId in arraySource) {
                if (sourceId !== 0) url = url + '&';
                url = url + arraySource[sourceId] + '=' + arraySource[sourceId][1];
            }

            return displayView(item);
        }
        else if (isDisplay) {
            $(item).show(); // Affiche l'item
            if ($(item).is('input,textarea,select')) { $(item).prop('disabled', false); }
            else { $(item).find('input,textarea,select').prop('disabled', false); }
        }
        else { // Cache l'item et réinitialise les valeurs à NULL
            $(item).hide();
            if ($(item).is('input,textarea,select')) {
                if (!$(item).is('select')) {
                    $(item).val('');
                }
                $(item).prop('disabled', true);
            }
            else {
                $(item).find('input,textarea,select').each(function () {
                    if (!$(this).is('select')) {
                        $(this).val('');
                    }
                    $(this).prop('disabled', true);
                });
            }

        }


    }
}

function displayView(item) {
    if ($(item).hasAttr('tabajax-display-url') && !$(item).hasAttr('tabajax-display-onloading')) {
        var view = $(item).attr('tabajax-display-view');
        if ((view === null || view === '' || view === undefined || !$('#' + view).length) && $(item).hasAttr('id')) {
            view = $(item).attr('id');
        }
        else { return false; }
        $(item).attr('tabajax-display-onloading', true);
        var replace = $(item).attr('tabajax-display-replace');
        if (replace !== undefined && (replace === 'true' || replace === 'True' || replace === true)) {
            TabAjaxLoaderBegin($('#' + view).parent().attr('id'));
        }
        else {
            TabAjaxLoaderBegin(view);
        }
        $.ajax({
            url: $(item).attr('tabajax-display-url'),
            success: function (result) {
                if (replace !== undefined && (replace === 'true' || replace === 'True' || replace === true)) {
                    $('#' + view).replaceWith(result);
                    $(item).removeAttr('tabajax-display-onloading');
                }
                else {
                    $('#' + view).html(result);
                    $(item).removeAttr('tabajax-display-onloading');
                }

                if ($('#' + view).is(":hidden")) {
                    $('#' + view).show(400);
                }

                if (!$('[tabajax-display-onloading]').length) {
                    Reset();
                }
            },
            error: function (result, statut, erreur) {
                $(item).removeAttr('tabajax-display-onloading');

                if (!$('[tabajax-display-onloading]').length) {
                    Reset();
                }
            }
        });
    }
}

$(document).ready(TabajaxDisplayLoad);
$(document).ajaxComplete(TabajaxDisplayLoad);
// --- Element qui contient le focus (result) ---
// === Updated : 11/06/2019 à 11:30 - PASSE Valentin ===
var ElementFocus = undefined;

// --- Enumération qui permet de définire la sortie du contenu (result) ---
// === Updated : 11/06/2019 à 11:30 - PASSE Valentin ===
const EnumResult = {
    HTML: "HTML", // Retourne le résultat à l'intérieur de l'élément en écrasant les données.
    REPLACE: "REPLACE", // Remplace le résultat de l'élement.
    APPEND: "APPEND", // Retourne le résultat après le dernier enfant qui se situe à l'interieur de l'élément.
    AFTER: "AFTER", // Retourne le résultat juste après l'élément.
    BEFORE: "BEFORE", // Retourne le résultat juste avant l'élément.
    PARENT: "PARENT" // Retourne le résultat au parent de l'élément.
};

// --- Fonction qui retourne le contenu (result) en fonction du type de result ---
// === Updated : 11/06/2019 à 11:30 - PASSE Valentin ===
function ReturnResult(selector, result, typeResult) {
    if (isElement(selector) || (isString(selector) && isElement(document.getElementById(selector)))) {
        if (!isElement(selector)) { selector = '#' + selector; }
        switch (typeResult) {
            case EnumResult.HTML:
                $(selector).html(result);
                break;
            case EnumResult.REPLACE:
                $(selector).replaceWith(result);
                selector = $(selector).parent();
                break;
            case EnumResult.APPEND:
                $(selector).append(result);
                break;
            case EnumResult.AFTER:
                $(selector).after(result);
                break;
            case EnumResult.BEFORE:
                $(selector).before(result);
                break;
            case EnumResult.PARENT:
                $(selector).parent().replaceWith(result);
                selector = $(selector).parent();
                break;
            default:
                $(selector).html(result);
        }
        // Recharge les bibliothèques et fonctions
        LibraryReload(selector);
        // Charge les TabajaxReady
        TabajaxReady(selector);
        return true;
    }
    else { return false; }
}

// --- Fonction qui lance l'appel ajax via un id de retour, l'url et le type ---
// - selector -
// - url -
// - type -
// - reload -
// - filter -
// - filterLoad -
// === Updated : 11/06/2019 à 11:30 - PASSE Valentin ===
function AjaxLoad(selector, url, typeResult, reload, filter, filterLoad) {
    var elemAjaxLoad = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemAjaxLoad = $(selector);
        }
        else if (isElement(document.getElementById(selector))) {
            elemAjaxLoad = $('#' + selector);
        }
    }
    else { elemAjaxLoad = selector; }

    if (!isUndefined(elemAjaxLoad) && !isNullOrEmpty(url)) {
        TabAjaxLoaderBegin(elemAjaxLoad);

        $.ajax({
            url: url,
            success: function (result) {
                AjaxLoadSuccess(result, elemAjaxLoad, typeResult, reload, filter, filterLoad);
            },
            //success: function (result) {
            //    if (ReturnResult(elemAjaxLoad, result, typeResult)) {
            //        // Recharge les bibliothèques et fonctions
            //        LibraryReload(elemAjaxLoad);
            //        // Charge les TabajaxReady
            //        TabajaxReady(elemAjaxLoad);
            //        // Enleve le module de chargement
            //        Reset(elemAjaxLoad);
            //    }
            //},
            error: function (result) {
                console.log('Erreur du chargement de la vue "' + elemAjaxLoad + '" : ' + result)
                AjaxLoadError(result, elemAjaxLoad, typeResult, reload, filter, filterLoad);
            }
        });
    }
}

// --- Fonction qui est effectué après l'ajax success via un result, selector, reload, filter ---
// - result -
// - selector -
// - reload -
// - filter -
// - filterLoad -
// === Updated : 26/06/2019 à 10:40 - PASSE Valentin ===
function AjaxLoadSuccess(result, selector, typeResult, reload, filter, filterLoad) {
    var elemAjaxLoadSuccess = selector;

    // Si 'Reload' existe, charge toutes les reload
    if (!isNullOrEmpty(reload)) {
        TabajaxReload(reload);
    }

    resultHtml = null;
    message = null;

    if (!isUndefined(result)) {
        if (!isUndefined(result.result)) {
            resultHtml = result.result;
        }
        if (!isUndefined(result.message)) {
            message = result.message;
        }
        if (isNull(message) && isNull(resultHtml)) {
            resultHtml = result;
        }
    }

    if (result !== true && !isNull(resultHtml)
        && ReturnResult(elemAjaxLoadSuccess, resultHtml, typeResult)) {

        if (!isNullOrEmpty(filter)) { TabajaxFilter(filter, filterLoad); }

        Reset(elemAjaxLoadSuccess);
    }
    else { Reset(); }

    if (message !== null) { TabAjaxMessage(message); }
}
// --- Fonction qui est effectué après l'ajax Error via un result, selector, reload, filter ---
// - result -
// - selector -
// - reload -
// - filter -
// - filterLoad -
// === Updated : 26/06/2019 à 10:40 - PASSE Valentin ===
function AjaxLoadError(result, selector, typeResult, reload, filter, filterLoad) {
    var elemAjaxLoadError = selector;

    // Si 'Reload' existe, charge toutes les reload
    if (!isNullOrEmpty(reload)) {
        TabajaxReload(reload);
    }

    resultHtml = null;
    message = null;

    if (!isUndefined(result)) {
        if (!isUndefined(result.responseJSON)) {
            if (!isUndefined(result.responseJSON.result)) {
                resultHtml = result.responseJSON.result;
            }
            if (!isUndefined(result.responseJSON.message)) {
                message = result.responseJSON.message;
                TabAjaxMessage(message);
            }
        }
        if (!isUndefined(result.responseText) && isNull(message) && isNull(resultHtml)) {
            TabAjaxErrorMessage(result.responseText);
        }
    }

    if (result !== true && !isNull(resultHtml)
        && ReturnResult(elemAjaxLoadError, result, typeResult)) {

        if (!isNullOrEmpty(filter)) { TabajaxFilter(filter, filterLoad); }

        Reset(elemAjaxLoadError);
    }
    else { Reset(); }

    console.log('Erreur d\'action : ' + result.responseText);
}

$(document).ready(function () {
    TabajaxReady('main');

    // =-=-=-=-=-=-=-= CLIQUE MENU - BLOC - MODAL - SUBMIT - ACTION =-=-=-=-=-=-=-=

    // --- Sous-menu en Ajax (dynamique) ---
    // - href/url -
    // === Updated : 24/05/2019 à 10:30 - PASSE Valentin ===
    $('body').on('click', '#menu-left ul li a[tabajax-type="dynamique"]', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);
        TabAjaxLoaderBegin();

        //TabAjaxUpdateFilter('load', 'false');
        var url = $(this).attrTabajaxUrl();

        //var a = $(this);
        var li = $(this).parent();

        if (!isNullOrEmpty(url)) {
            $.ajax({
                url: url,
                success: function (result) {
                    $('#page').html(result);
                    window.history.pushState("", "", url);

                    ResetMenuLeft();
                    SelectMenuLeft(li.attr('value'));
                    TabAjaxTitle(li);

                    LibraryReload('main');
                    TabajaxReady('main');

                    Reset();
                }
            });
        }
        else {
            console.log('Erreur de chargement du sous-menu "' + li.attr('value') + '" - #menu-left : Le lien Url n\' est pas valide.')
            Reset(id);
        }
    });// end [#menu-left]

    // --- Filters Tri ---
    // - Sort -
    // - order -
    $('body').on('click', 'table thead th[order] a[name]', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);
        if ($('#Panel-table').length) { TabAjaxLoaderBegin('Panel-table'); }
        else { TabAjaxLoaderBegin(); }

        // Verifie s'il est ascendant ou descendant
        var sort = $(this).attr('name');
        var order = TabAjaxFilterByKey('order');

        if (sort === TabAjaxFilterByKey('sort')
            && order === 'Asc') {
            order = TabAjaxUpdateFilter('order', 'Desc');
        } else {
            TabAjaxUpdateFilter('sort', $(this).attr('name'));
            order = TabAjaxUpdateFilter('order', 'Asc');
        }

        TabAjaxLoadData();
    });

    // --- Filters Export --- =================== ATTENTION ! VALEUR A CHANGER DANS L EXPORT - Actuellement Operea ===================
    // - affichage -
    $('body').on('click', '[tabajax-type="export"] a,[tabajax-type="export"] button, button[tabajax-type="export"], a[tabajax-type="export"]', function (event) {
        if ($(this).attr('fichier') !== undefined) {
            var params = '';
            var folder = '';
            var format = '';
            if ($(this).attr('params') !== undefined) {
                params = $(this).attr('params');
            }
            if ($(this).attr('folder') !== undefined) {
                folder = '%2f' + $(this).attr('folder');
            }
            if ($(this).attr('format') !== undefined) {
                format = $(this).attr('format');
            }

            TabAjaxExportByFilters('Operea' + folder, $(this).attr('fichier'), format, params);
        }
    });


    // =-=-=-=-=-=-=-= AUTRES COMPOSANTS =-=-=-=-=-=-=-=


    // --- Add new row [tabajax-row-add] ---
    $('body').on('click', '[tabajax-row-add]', function () {
        var row = $(this);
        var url = $(this).attr('tabajax-row-add');
        $.ajax({
            url: url,
            success: function (result) {
                $(result).insertBefore(row);
            }
        });
    });
    // --- Remove bloc by attr [tabajax-bloc-remove] ---
    $('body').on('click', '[tabajax-bloc-remove]', function () {
        var id = $(this).attr('tabajax-bloc-remove');
        if ($('[id="' + id + '"]').length === 1) {
            $('#' + id).remove();
        }
        else if ($('[id="' + id + '"]').length > 1) {
            var object = $(this).parent();
            var i = 0;
            while ($(object).attr('id') !== id && i < 15) {
                object = $(object).parent();
                i++;
            }
            if ($(object).attr('id') === id) {
                $(object).remove();
            }
        }
    });

    //// --- Add focus element at the variable "ElementFocus" --- A AMELIORER
    //$('body').on('focus', 'input', function () {
    //    ElementFocus = this;
    //});

    // =-=-=-=-=-=-=-= REGLAGE =-=-=-=-=-=-=-=

    //// --- Reglages affichage --- 
    //// - affichage -
    //$('body').on('click', 'li [id^="tab-affichage-"]', function (event) {
    //    event.preventDefault ? event.preventDefault() : (event.returnValue = false);
    //    TabAjaxLoaderBegin();

    //    if ($(this).attr('tabajax-size').length && !checkAffichage($(this).attr('tabajax-size'))) {
    //        var size = TabAjaxUpdateFilter('size', $(this).attr('tabajax-size'));
    //        if (size !== undefined && parseInt(size) === 0) {
    //            TabAjaxUpdateFilter('id', null);
    //            TabAjaxLoadData();
    //        }
    //        else {
    //            TabAjaxLoad();
    //        }
    //    }

    //    if (typeof $(this).attr('tabajax-change') !== typeof undefined && $(this).attr('tabajax-change') !== false) {
    //        $(this).hide(0);
    //        $('#' + $(this).attr('tabajax-change')).show(0);
    //    }

    //    Reset();
    //});

    //// --- Reglages affichage --- 
    //// - affichage -
    //$('body').on('click', 'li [id^="tab-affichage-"]', function (event) {
    //    event.preventDefault ? event.preventDefault() : (event.returnValue = false);
    //    TabAjaxLoaderBegin();

    //    if ($(this).hasAttr('tabajax-size') && !checkAffichage($(this).attr('tabajax-size'))) {
    //        var size = $(this).attr('tabajax-size');
    //        if (size === undefined || size === '') {
    //            var size = TabAjaxFilterByKey('size');
    //        }
    //        else {
    //            var size = TabAjaxUpdateFilter('size', size);
    //        }

    //        if (size !== undefined && parseInt(size) === 0) {
    //            TabAjaxUpdateFilter('id', null);
    //            TabAjaxLoadData();
    //        }
    //        else {
    //            TabAjaxLoad();
    //        }
    //    }

    //    if (typeof $(this).attr('tabajax-change') !== typeof undefined && $(this).attr('tabajax-change') !== false) {
    //        $(this).hide(0);
    //        $('#' + $(this).attr('tabajax-change')).show(0);
    //    }

    //    Reset();
    //});

    //// --- Reglages Options --- 
    //// - change -
    //$('body').on('click', 'li [id^="tab-option-"]', function (event) {
    //    event.preventDefault ? event.preventDefault() : (event.returnValue = false);

    //    if (typeof $(this).attr('tabajax-change') !== typeof undefined && $(this).attr('tabajax-change') !== false) {
    //        $(this).hide(0);
    //        $('#' + $(this).attr('tabajax-change')).show(0);
    //    }
    //});

    //// --- Reglages Close --- 
    //// - affichage -
    //$('body').on('click', '[tabajax-close]', function (event) {
    //    if (typeof $(this).attr('tabajax-close') !== typeof undefined && $(this).attr('tabajax-close') !== false) {
    //        $('#' + $(this).attr('tabajax-close')).empty();
    //    }
    //});

    // --- Reglages bloc affiche --- 
    // - affiche -
    $('body').on('click', '[tabajax-affiche]', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);

        $('#' + $(this).attr('tabajax-affiche')).each(function () {
            if ($(this).is(":visible")) {
                $(this).hide(400);
                $(event.currentTarget).children('i').attr('class', 'fa fa-plus');
            }
            else {
                $(this).show(400);
                $(event.currentTarget).children('i').attr('class', 'fa fa-minus');
            }
        });
    });

    // --- Reglages Print --- 
    // - affiche -
    $('body').on('click', '#tab-print', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);
        if ($('#Panel-details').length) { TabAjaxLoaderBegin('Panel-details'); }
        else { TabAjaxLoaderBegin(); }


        $('#tab-content > [id^="tab"]').printThis({
            importStyle: true
        });

        Reset();
    });

    // --- Reglages Raccourcie --- 
    // - Enter
    $('body').on('keypress', 'input[tabajaxFilter]:not(:disabled):focus,input[tabajaxUpdateAuto]:not(:disabled):focus', function (event) {
        if (event.keyCode === 13) {
            event.preventDefault ? event.preventDefault() : (event.returnValue = false);
            $(this).focusout();
        }
    });
    // - Enter
    $('body').on('mouseup', '[href],[tabajax-url],[tabajaxUrl]', function (event) {
        if (event.which === 2) {
            event.preventDefault ? event.preventDefault() : (event.returnValue = false);
            window.open($(this).attrTabajaxUrl(), '_blank');
        }
    });
    // - Touche + Alt -
    $(document).keydown(function (e) {

        if (!$('input').is(":focus") && !$('select').is(":focus") && !$('textarea').is(":focus") && !$('span.select2').is(":focus")) {
            var isModal;
            var n
            if ($("#Modal").children('.modal').length) { isModal = $("#Modal").children('.modal').data('bs.modal').isShown; }
            else { isModal = false; }
            switch (e.which) {
                case 39: // Reglage Tab Suivant : →
                    if ($('li[id^="tab-view-"]').length && !isModal) {
                        event.preventDefault()
                        n = $('li[id^="tab-view-"][class~="active"]').index() + 2;
                        if ($('li[id^="tab-view-"]:nth-child(' + n + ') a').length) {
                            $('li[id^="tab-view-"]:nth-child(' + n + ') a').click();
                        }
                        else {
                            $('li[id^="tab-view-"]:first-child a').click()
                        }
                    }
                    break;
                case 37: // Reglage Tab Précédent : ←
                    if ($('li[id^="tab-view-"]').length && !isModal) {
                        event.preventDefault()
                        n = $('li[id^="tab-view-"][class~="active"]').index();
                        if ($('li[id^="tab-view-"]:nth-child(' + n + ') a').length) {
                            $('li[id^="tab-view-"]:nth-child(' + n + ') a').click();
                        }
                        else {
                            $('li[id^="tab-view-"]:last-child a').click()
                        }
                    }
                    break;
                case 40: // Reglage Row Suivant : ↓
                    if ($('a[tabajax-row]').length && !isModal) {
                        event.preventDefault()
                        n = $('a[tabajax-row][class~="row-selected"]').index() + 2;
                        if ($('a[tabajax-row]:nth-child(' + n + ')').length) {
                            $('a[tabajax-row]:nth-child(' + n + ')').click();
                        }
                        else {
                            $('a[tabajax-row]:first-child').click()
                        }
                    }
                    break;
                case 38: // Reglage Row Précédent : ↑
                    if ($('a[tabajax-row]').length && !isModal) {
                        event.preventDefault()
                        n = $('a[tabajax-row][class~="row-selected"]').index();
                        if ($('a[tabajax-row]:nth-child(' + n + ')').length) {
                            $('a[tabajax-row]:nth-child(' + n + ')').click();
                        }
                        else {
                            $('a[tabajax-row]:last-child').click()
                        }
                    }
                    break;
                case 106: // Reglage Visible : *
                    if ($('[id^="tab-reglage-"]').length) {
                        event.preventDefault()
                        $('[id^="tab-reglage-"]:visible').click();
                    }
                    break;
                case 188: // Reglage Help : ?
                    if (e.which && $('#tab-help').length) {
                        event.preventDefault()
                        $('#tab-help').click();
                    }
                    break;
                case 107: // Reglage Agrandir : +
                    if ($('#tab-affichage-agrandir').length) {
                        event.preventDefault()
                        $('#tab-affichage-agrandir').click();
                    }
                    break;
                case 109: // Reglage Réduire : -
                    if ($('#tab-affichage-reduire').length) {
                        event.preventDefault()
                        $('#tab-affichage-reduire').click();
                    }
                    break;
                case 111: // Reglage Affiche : /
                    if ($('[tabajax-affiche]').length) {
                        event.preventDefault()
                        $('[tabajax-affiche]:visible').click();
                    }
                    break;
                case 35: // Reglage Close : Fin
                    if ($('#tab-affichage-fermer').length) {
                        event.preventDefault()
                        $('#tab-affichage-fermer').click();
                    }
                    break;
            }
        }

        if (event.altKey && !$('input').is(":focus") && !$('select').is(":focus")) {
            event.preventDefault()
            switch (e.which) {
                case 80: // Reglage Print : Alt + P
                    if ($('#tab-print').length) {
                        $('#tab-print').click();
                    }
                    break;
                case 83: // Reglage Print : Alt + S
                    if ($('#submit').length) {
                        $('#submit').click();
                    }
                    break;
            }
        }
    });
});
// --- Fonction qui permet de générer le contenu via les attributs TabajaxReady ---
// - ready/html/id -
// - href -
// - replace -
// === Updated : 11/07/2019 à 14:30 - PASSE Valentin ===
function TabajaxReady(selector) {
    var elemReady = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemReady = $(selector);
        }
        else if (isElement(document.getElementById(selector))) {
            elemReady = $('#' + selector)
        }
    }
    else { elemReady = selector; }


    // Check si c'est un element du DOM
    if (isElement(elemReady)) {
        $(elemReady).find('[tabajaxReady][tabajaxReady!=false][tabajaxReady!=False],[tabajax-ready][tabajax-ready!=false][tabajax-ready!=False]').each(function () {

            // Récupère l'element de sortie (selector)
            var html = $(this).attrTabajaxHtml();
            if ($(this).hasAttr('tabajaxReady') && $(this).attr('tabajaxReady') !== 'true' && $(this).attr('tabajaxReady') !== 'True') { html = $(this).attr('tabajaxReady'); }
            else if ($(this).hasAttr('tabajax-ready') && $(this).attr('tabajax-ready') !== 'true' && $(this).attr('tabajax-ready') !== 'True') { html = $(this).attr('tabajax-ready'); }
            else if ($(this).hasAttr('tabajaxBloc') && $(this).attr('tabajaxBloc') !== 'true' && $(this).attr('tabajaxBloc') !== 'True') { html = $(this).attr('tabajaxBloc'); }
            else if ($(this).hasAttr('tabajax-bloc') && $(this).attr('tabajax-bloc') !== 'true' && $(this).attr('tabajax-bloc') !== 'True') { html = $(this).attr('tabajax-bloc'); }

            // Récupère le lien Url
            var url = $(this).attrTabajaxUrl();

            // Récupère le type de résultat
            var typeResult = $(this).attrTabajaxResult();

            if ($(this).hasAttr('tabajaxReady')) {
                $(this).removeAttr('tabajaxReady');
            }
            else {
                $(this).removeAttr('tabajax-ready');
            }

            AjaxLoad(html, url, typeResult);

        });
    }
}
/**
 * Exécute une action en ajax lors d'un clique ou d'un changement sur un élément du DOM qui a un attribut qui se nomme [tabajaxAction] ou [tabajax-action].
 * @function
 * @name TabajaxEventAction
 * @param {(boolean|string)} tabajaxAction - [tabajax-action] - Définit l'élément qui possède cette action. 
 * Si la valeur est "true", c'est cette élément qui prendra en charge l'action.
 * Si la valeur est de type "string", c'est le selecteur qui prendra en charge l'action.
 * @param {string} [tabajaxUrl] - [tabajax-url|href|data-url|action] - Définit l'url de l'action qui devra être éxécuter en ajax.
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet.
 * @param {string} [tabajaxHtml] - [tabajax-html] - Définit le selecteur qui recevra le retour de l'action.
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet. 
 * @param {string} [tabajaxResult] - [tabajax-result|tabajaxType|tabajax-type] - Définit le type de retour à partir de [tabajaxHtml].
 * Par défaut : "HTML".
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet. 
 * @param {string} [tabajaxReload] - [tabajax-reload] - Définit les éléments à recharger à la suite de cette action.
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet. 
 * @param {string} [tabajaxFilter] - [tabajax-filter] - Définit les éléments à filtrer à la suite de cette action.
 * Les autres attributs de [tabajaxFilter] fonctionnent aussi ([tabajaxFilterLoad]).
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet. 
 * @param {string} [tabajaxChangeUrl] - [tabajax-changeUrl|tabajaxUrlChange|tabajax-urlChange] - Définit le changement de l'url avec la valeur de l'attribut.
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet. 
 * @param {string} [tabajaxChangeParameter] - [tabajax-changeParameter|tabajaxParameterChange|tabajax-parameterChange] - Définit le changement de paramètre avec la valeur de cet élément au selecteur de l'attribut.
 * Attribut à utiliser uniquement sur l'élément qui prendra en charge l'objet. 
 * @see {@link /tabajax/tabajax.Event/TabajaxResult|TabajaxResult} - Documentations sur TabajaxResult.
 * @see {@link /tabajax/tabajax.Event.Reload|TabajaxReload} - Documentations sur TabajaxReload.
 * @see {@link /tabajax/tabajax.Event.Filter|TabajaxFilter} - Documentations sur TabajaxFilter.
 * @see {@link /tabajax/tabajax.Event.Change|TabajaxChangeUrl|TabajaxChangeParameter} - Documentations sur TabajaxChangeUrl & TabajaxChangeParameter.
 * @example <caption>Utilisation d'une action d'un lien.</caption>
 * <!-- Effectue l'action sans retour attendu -->
 * <a id="index-action" href="/Lien/Url" tabajaxAction="true">Clique</a> * 
 * <!-- Effectue une action avec un contenu html en retour -->
 * <a id="index-action" href="/Lien/Url" tabajaxAction="true" tabajaxHtml="div[id='index-retour']">Clique</a>
 * <div id="index-retour">Mon contenu de retour</div>
 * @example <caption>Utilisation d'une action d'un dropdown.</caption>
 * <!-- Effectue l'action lors d'un changement de valeur du dropdown -->
 * <!-- L'url de l'action sera alors : "Lien/Url?city=[value selected]" -->
 * <select id="index-select" name="city" tabajaxAction="true" data-url="/Lien/Url">
 * <option value="1" selected>Nice</option>
 * <option value="2">Marseille</option>
 * <option value="3">Lyon</option>
 * </select>
 * @author Valentin PASSE <valentin.passe@eaudazur.com>
 * @version 1.0.0
*/

$(document).ready(function () {   
    // --- Clique Action en Ajax  ---
    // - href/url -
    // - [html] -
    // - [reload] -
    // === Updated : 11/09/2019 à 14:50 - PASSE Valentin ===
    $('body').on('click', '[tabajaxAction],[tabajax-action]', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);

        var action = $(this).attrTabajaxAction();
        var elementAction = null;

        if (action === 'true' || action === 'True') {
            // Attribut l'élément de l'action
            elementAction = $(this);
        }
        else if (action !== 'false' && action !== 'False' && isElement(action)) {
            // Attribut l'élément de l'action
            elementAction = $(action);
        }

        if (elementAction !== null) {
            // Récupère le lien Url
            var url = $(elementAction).attrTabajaxUrl();

            if (!isNullOrEmpty(url)) {

                // Récupère l'element de sortie (selector)
                var html = $(elementAction).attrTabajaxHtml(false);
                if (isUndefined(html)) { html = ''; }

                // TabAjaxLoaderBegin : Demarre le Loader
                TabAjaxLoaderBegin(html);

                // Récupère le type de résultat
                var typeResult = $(elementAction).attrTabajaxResult();

                // Cache tous les modal
                var modal = $(elementAction).closest('.modal:visible');
                if ($(modal).length) { TabajaxModalClose('#' + $(modal).attr('id')) }
                else { TabajaxModalClose(); }

                // Définis les Reload s'il y en a
                var reload = $(elementAction).attrTabajaxReload();

                //Si TabajaxFilter existe, cela signifie qu'il s'agit de faire un TabajaxFilter après l'appel ajax
                var filter = $(elementAction).attrTabajaxFilter();
                var filterLoad = $(elementAction).attrTabajaxFilterLoad();

                TabajaxChangeUrl(elementAction);
                TabajaxChangeParameter(elementAction);

                $.ajax({
                    url: url,
                    success: function (result) {
                        AjaxLoadSuccess(result, html, typeResult, reload, filter, filterLoad);
                    },
                    error: function (result) {
                        AjaxLoadError(result, html, typeResult, reload, filter, filterLoad);
                    }
                });
            }
            else {
                console.log('Erreur d\'action : L\'Url de l\'action n\'est pas présent.')
                Reset(html);
            }
        }

    });
    // --- Change Select Action en Ajax  ---
    // - href/url -
    // - name -
    // - value -
    // - [TabajaxAction]:Click() -
    // === Updated : 26/06/2019 à 10:00 - PASSE Valentin ===
    $('body').on('change', 'select[tabajaxAction=true],select[tabajaxAction=True],select[tabajax-action=true],select[tabajax-action=True]', function (event) {

        // Récupère le nom de l'url de l'action
        var urlName = undefined;
        if (!isNullOrEmpty($(this).attr('href'))) { urlName = 'href'; }
        else if (!isNullOrEmpty($(this).attr('tabajaxUrl'))) { urlName = 'tabajaxUrl'; }
        else if (!isNullOrEmpty($(this).attr('tabajax-url'))) { urlName = 'tabajax-url'; }

        // Récupère le nom du select
        var name = $(this).attr('name');

        if (!isNullOrEmpty(urlName) && !isNullOrEmpty(name)) {
            var url = $(this).attr(urlName);

            if (url.indexOf("?") !== -1) { url += '&'; }
            else { url += '?'; }
            url += name + '=' + $(this).val();

            $(this).attr(urlName, url);

            // Déclenche tabajaxAction
            $(this).click();
        }
    });
});
/**
 * Exécute une action en ajax qui permet de restituer un bloc html lors d'un clique sur un élément du DOM qui a un attribut qui se nomme [tabajaxBloc] ou [tabajax-bloc].
 * @function
 * @name TabajaxEventBloc
 * @param {(boolean|string)} tabajaxBloc - [tabajax-bloc] - Définit l'élément qui possède cette action de restitution. 
 * Si la valeur est "false", l'évènement ne sera pas actif.
 * Si la valeur est de type "string", c'est le selecteur qui prendra en charge la restitution du bloc HTML.
 * @param {string} [tabajaxUrl] - [tabajax-url|href|data-url|action] - Définit l'url de l'action qui devra être éxécuter en ajax.
 * @param {string} [tabajaxHtml] - [tabajax-html] - Définit le selecteur qui prendra en charge la restitution du bloc HTML.
 * Attribut à utiliser uniquement si l'élément n'est pas celui qui restituera le contenu HTML et si "tabajaxBloc" n'est pas un selecteur. 
 * @param {string} [tabajaxResult] - [tabajax-result|tabajaxType|tabajax-type] - Définit le type de retour à partir de l'objet, [tabajaxBloc] ou [tabajaxHtml].
 * Par défaut : "HTML".
 * @param {string} [tabajaxFilter] - [tabajax-filter] - Définit les éléments à filtrer à la suite de cette action.
 * Les autres attributs de [tabajaxFilter] fonctionnent aussi ([tabajaxFilterLoad]).
 * @param {string} [tabajaxChangeUrl] - [tabajax-changeUrl|tabajaxUrlChange|tabajax-urlChange] - Définit le changement de l'url avec la valeur de l'attribut.
 * @param {string} [tabajaxChangeParameter] - [tabajax-changeParameter|tabajaxParameterChange|tabajax-parameterChange] - Définit le changement de paramètre avec la valeur de cet élément au selecteur de l'attribut.
 * @see {@link /tabajax/tabajax.Event/TabajaxResult|TabajaxResult} - Documentations sur TabajaxResult.
 * @see {@link /tabajax/tabajax.Event.Filter|TabajaxFilter} - Documentations sur TabajaxFilter.
 * @see {@link /tabajax/tabajax.Event.Change|TabajaxChangeUrl|TabajaxChangeParameter} - Documentations sur TabajaxChangeUrl & TabajaxChangeParameter.
 * @example <caption>Utilisation d'un affichage d'un bloc à partir d'un bloc parent.</caption>
 * <!-- Effectue l'action du bloc -->
 * <div id="index-bloc" tabajaxBloc="true" tabajax-url="/Lien/Url">
 *  <!-- Mon contenu de retour à la suite du clique du bloc parent -->
 * </div>
 * @example <caption>Utilisation d'un affichage d'un bloc à partir d'un autre bloc.</caption>
 * <!-- Effectue l'action du bloc -->
 * <div id="index-bloc" tabajaxBloc="index-bloc-retour" tabajax-url="/Lien/Url">
 *  Clique sur ce bloc
 * </div>
 * <div id="index-bloc-retour">
 *  <!-- Mon contenu de retour à la suite du clique du bloc #index-bloc --> 
 * </div>
 * @author Valentin PASSE <valentin.passe@eaudazur.com>
 * @version 1.0.0
*/

$(document).ready(function () {

    // --- Clique Bloc en Ajax  ---
    // - bloc/html/id -
    // - href/url -
    // === Updated : 12/07/2019 à 11:00 - PASSE Valentin ===
    $('body').on('click', '[tabajaxBloc][tabajaxBloc!=false][tabajaxBloc!=False],[tabajax-bloc][tabajax-bloc!=false][tabajax-bloc!=False]', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);

        // Récupère l'element de sortie (selector)
        var html = $(this).attrTabajaxHtml();
        if ($(this).hasAttr('tabajaxBloc') && $(this).attr('tabajaxBloc') !== 'true' && $(this).attr('tabajaxBloc') !== 'True') { html = $(this).attr('tabajaxBloc'); }
        else if ($(this).hasAttr('tabajax-bloc') && $(this).attr('tabajax-bloc') !== 'true' && $(this).attr('tabajax-bloc') !== 'True') { html = $(this).attr('tabajax-bloc'); }

        if ($(this).hasAttrTabajaxUrl()) {
            // Récupère le lien Url
            var url = $(this).attrTabajaxUrl();

            // Récupère le type de résultat
            var typeResult = $(this).attrTabajaxResult();

            //// Définis les Reload s'il y en a
            //var reload = $(this).attrTabajaxReload();

            // Si TabajaxFilter existe, cela signifie qu'il s'agit de faire un TabajaxFilter après l'appel ajax
            var filter = $(this).attrTabajaxFilter();
            var filterLoad = $(this).attrTabajaxFilterLoad();

            TabajaxChangeUrl(this);
            TabajaxChangeParameter(this);

            AjaxLoad(html, url, typeResult, null, filter, filterLoad);
        }
        else {
            TabajaxReload(html);
        }
    });// end [tabajax-bloc]

});
// --- Fonction qui permet de changer l'url via l'attribut TabajaxChangeUrl ---
// - id/html -
// - href/url -
// === Updated : 11/06/2019 à 11:30 - PASSE Valentin ===
function TabajaxChangeUrl(selector) {
    var elemChangeUrl = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemChangeUrl = $(selector);
        }
        else if (isElement(document.getElementById(selector))) {
            elemChangeUrl = $('#' + selector)
        }
    }
    else { elemChangeUrl = selector; }

    if (isElement(elemChangeUrl) && $(elemChangeUrl).hasAttrTabajaxChangeUrl()) {
        var url = undefined;

        if (($(elemChangeUrl).attr('tabajax-changeUrl') === "true" || $(elemChangeUrl).attr('tabajax-changeUrl') === "True")
            || ($(elemChangeUrl).attr('tabajaxChangeUrl') === "true" || $(elemChangeUrl).attr('tabajaxChangeUrl') === "True")) {
            url = $(elemChangeUrl).attrTabajaxUrl();
        }
        else {
            url = $(elemChangeUrl).attrTabajaxChangeUrl();
        }

        ChangeUrl(url);
    }
}

// --- Fonction qui permet de changer l'url via le parametre url ---
// - url -
// === Updated : 18/09/2019 à 13:30 - PASSE Valentin ===
function ChangeUrl(url) {
    if (!isNullOrEmpty(url)) {
        if (typeof (history.pushState) !== "undefined") {
            var obj = { Page: null, Url: url };
            history.pushState(null, obj.Page, obj.Url);
        } else {
            alert("Browser does not support HTML5.");
        }
    }
}

// --- Fonction qui permet de changer un parametre via l'attribut TabajaxChangeParameter ---
// - id/html -
// - href/url -
// === Updated : 12/02/2020 à 09:45 - PASSE Valentin ===
async function TabajaxChangeParameter(selector) {
    var elemChangeParameter = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemChangeParameter = $(selector);
        }
        else if (isElement('#' + selector)) {
            elemChangeParameter = $('#' + selector)
        }
    }
    else { elemChangeParameter = selector; }

    if (isElement(elemChangeParameter) && $(elemChangeParameter).hasAttrTabajaxChangeParameter()) {

        var arrayChangeParameter = $(elemChangeParameter).attrTabajaxChangeParameter().split(',');

        for (var iChangeParameter = 0; iChangeParameter < arrayChangeParameter.length; iChangeParameter++) {

            //var elemParameter = $('#' + arrayChangeParameter[iChangeParameter]);
            // Récupère l'élèment du DOM
            var elemParameter = undefined;
            if (isElement(arrayChangeParameter[iChangeParameter])) {
                elemParameter = $(arrayChangeParameter[iChangeParameter]);
            }
            else if (isElement('#' + arrayChangeParameter[iChangeParameter])) {
                elemParameter = $('#' + arrayChangeParameter[iChangeParameter]);
            }

            if (isElement(elemParameter)) {
                var value = $(elemChangeParameter).val();
                if (isNullOrEmpty(value)) { value = $(elemChangeParameter).attr('value'); }

                if ($(elemParameter).hasAttr('datepicker') || $(elemParameter).hasAttr('dateTimepicker')) {
                    var date = new Date(ParseDate(value, '/'));
                    if (isDate(date)) {
                        $(elemParameter).attr('value', dateFormat(date, "dd/mm/yyyy HH:MM:ss"));
                    }
                    else { value = undefined; }
                }
                else if ($(elemParameter).is('[type="checkbox"]') || $(elemParameter).is('[type=radio]')) {
                    if (value === true || value === 'true' || value === 'True') { $(elemParameter).prop('checked', true); }
                    else { $(elemParameter).prop('checked', false); }

                }
                else {
                    $(elemParameter).attr('value', value);
                }
            }
        }
        //for (iChangeParameter = 0; iChangeParameter < arrayChangeParameter.length; iChangeParameter++) {
        //    $(elemParameter).change();
        //}

        for (var iChangeParameter = 0; iChangeParameter < arrayChangeParameter.length; iChangeParameter++) {
            var elemParameter = undefined;
            if (isElement(arrayChangeParameter[iChangeParameter])) {
                elemParameter = $(arrayChangeParameter[iChangeParameter]);
            }
            else if (isElement('#' + arrayChangeParameter[iChangeParameter])) {
                elemParameter = $('#' + arrayChangeParameter[iChangeParameter]);
            }
            await $(elemParameter).change();
        }
    }
}

$(document).ready(function () {

    // --- button - lorsque un click est détécté ---
    // - Input simple, Textarea simple
    $('body').on("click", "button[tabajaxChangeParameter]:not([disabled]):not([tabajaxBloc]):not([tabajax-bloc]):not([tabajaxSubmit]):not([tabajax-submit],a[tabajaxChangeParameter]:not([disabled]):not([tabajaxBloc]):not([tabajax-bloc]):not([tabajaxSubmit]):not([tabajax-submit]),li[tabajaxChangeParameter]:not([disabled]):not([tabajaxBloc]):not([tabajax-bloc]):not([tabajaxSubmit]):not([tabajax-submit])", function () {
        TabajaxChangeParameter(this);
    });
    // --- Sumbit Auto - lorsque un changement est détécté ---
    // - Input simple, Textarea simple
    $('body').on("focusout", "input[tabajaxChangeParameter]:not([switch]):not([type='checkbox']):not([disabled]):not([datepicker]):not([datetimepicker]),textarea[tabajaxChangeParameter]:not([disabled]):not([editor])", function () {
        //debugger;
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            TabajaxChangeParameter(this);
        }
    });
    // - Input DatePicker
    $('body').on("change", "input[tabajaxChangeParameter][datepicker]:not([switch]):not([disabled]),input[tabajaxChangeParameter][datetimepicker]:not([switch]):not([disabled]),input[tabajaxChangeParameter][type='date']:not([switch]):not([disabled]),input[tabajaxChangeParameter][type='datetime']:not([switch]):not([disabled])", function () {
        //debugger;
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            TabajaxChangeParameter(this);
        }
    });
    // - Textarea editor
    $('body').on("focusout", "textarea[tabajaxChangeParameter][editor]:not([disabled])", function () {
        //debugger;
        if (decodeURIComponent($(this).val()) !== decodeURIComponent($(this).attr('valueDefault'))) {
            $(this).attr('value', decodeURIComponent($(this).val()));
            $(this).attr('valueDefault', decodeURIComponent($(this).val()));
            TabajaxChangeParameter(this);
        }
    });
    // - Select simple
    $('body').on("change", "select[tabajaxChangeParameter]:not([disabled])", function () {
        //debugger;
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            TabajaxChangeParameter(this);
        }
    });
    // - Input checkbox simple
    $('body').on("change", "input[tabajaxChangeParameter][type='checkbox']:not([disabled])", function () {
        //debugger;
        var check = 'false';
        if ($(this).is(":checked")) { check = 'true'; }

        if (check !== $(this).attr('valueDefault')) {
            $(this).attr('value', check);
            $(this).attr('valueDefault', check);
            TabajaxChangeParameter(this);
        }
    });
    // - Input radio simple
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxChangeParameter][type='radio']:not([disabled])", function () {
        if ($(this).is(":checked")) { TabajaxChangeParameter(this); }
    });
});
// --- Fonction qui permet de générer le contenu via les filtres de TabajaxFilters ---
// - html -
// - href/url -
// - replace -
// === Updated : 14/02/2020 à 11:45 - PASSE Valentin ===
function TabajaxFilter(selector, load) {
    // Check if Array exist
    if (!isNullOrEmpty(selector)) {
        var arrayFilter = selector.split(',');

        // Effectue un chargement du Filter si "load" = true
        var isLoad = false;
        if (isNullOrEmpty(load) || (load !== false && load !== 'false' && load !== 'False')) { isLoad = true; }

        for (iFilter = 0; iFilter < arrayFilter.length; iFilter++) {

            // Récupère l'élèment du DOM
            var elemFilter = undefined;
            if (isElement(arrayFilter[iFilter])) {
                elemFilter = $(arrayFilter[iFilter]);
            }
            else if (isElement('#' + arrayFilter[iFilter])) {
                elemFilter = $('#' + arrayFilter[iFilter]);
            }

            if (!isUndefined(elemFilter)) {

                $(elemFilter).each(function () {

                    var filter = $(this);

                    // Verifie si l'element bloque le "load"
                    var elemLoad = isLoad;
                    if (elemLoad === true && ($(filter).attr('tabajaxFilterLoad') === 'false' || $(filter).attr('tabajaxFilterLoad') === 'False')) elemLoad = false;

                    // Récupère l'element de sortie (selector)
                    var html = $(filter).attrTabajaxHtml();

                    // Récupère le lien Url
                    var url = $(filter).attrTabajaxUrl();

                    // Récupère le type de résultat
                    var typeResult = $(filter).attrTabajaxResult();

                    if (!isNullOrEmpty(html) && !isNullOrEmpty(url)) {
                        // Commence par '?' avec le "start = true"
                        var start = true;

                        // Récupere toutes les variables de l'URL
                        var vars = getUrlVars(url);

                        // Supprime les variables dans l'URL à partir de '?'
                        url = getUrlWithoutVars(url);

                        // Supprime toutes les variables dans l'url qui bénificie d'un input filter dans le DOM
                        var varsFilter = vars;
                        vars.forEach(function (element) {
                            if ($('[tabajaxFilter*="' + arrayFilter[iFilter] + '"][name="' + element.name + '"],[tabajax-filter*="' + arrayFilter[iFilter] + '"][name="' + element.name + '"]').length) {
                                varsFilter = varsFilter.filter(function (el, index, arr) {
                                    return el.name !== element.name;
                                });
                            }
                        });
                        vars = varsFilter;

                        // Cherche tous les inputs, select et autres éléments de formulaires
                        $('main').find('[tabajaxFilter*="' + arrayFilter[iFilter] + '"][name]').each(function () {

                            var name = $(this).attr('name');
                            var value = $(this).val();
                            if (isNullOrEmpty(value)) { value = $(this).attr('value'); }

                            if ($(this).hasAttr('datepicker') || $(this).hasAttr('dateTimepicker')) {
                                var date = new Date(ParseDate($(this).val(), '/'));
                                if (isDate(date)) {
                                    value = dateFormat(date, "dd/mm/yyyy HH:MM:ss");
                                }
                                else { value = undefined; }
                            }
                            else if ($(this).is('[type="checkbox"]')) {
                                // A Checker il existe valuecheck, si oui, remplacer le boolean par la valeur et supprimer si le check est null
                                if ($(this).hasAttr('valuecheck')) {
                                    if ($(this).attr('valueCheck') !== 'true') {
                                        value = undefined;
                                    }
                                }
                                else {
                                    if (value === 'on') { value = undefined; }
                                    else if ($(this).is(":checked")) { value = 'true'; }
                                    else { value = 'false'; }
                                }
                            }
                            else if ($(this).is('[type=radio]') && !$(this).is(':checked')) {
                                value = undefined;
                            }

                            if (vars.indexOf(name) !== -1) {
                                if (!isNullOrEmpty(value) && value !== vars[name]) {
                                    if (!isNullOrEmpty(vars[name])) {
                                        let obj = {
                                            'name': name,
                                            'value': value
                                        }
                                        vars.push(obj);
                                    }
                                    else { vars.find(x => x.name === name).value = value; }
                                }
                            }
                            else {
                                let obj = {
                                    'name': name,
                                    'value': value
                                }
                                vars.push(obj);
                            }
                        });

                        // Ajoute à l'url tous les variables
                        vars.forEach(function (element) {
                            if (!isNullOrEmpty(element.value)) {
                                if (start === true) {
                                    url = url + '?';
                                    start = false;
                                }
                                else { url = url + '&'; }

                                if (isArray(element.value)) {

                                    var arrayVarsStart = true;
                                    var arrayVars = element.value;
                                    for (var arr in arrayVars) {
                                        if (!arrayVarsStart) { url = url + '&'; }
                                        else { arrayVarsStart = false; }

                                        if (!isNullOrEmpty(arrayVars[arr])) { url = url + element.name + '=' + arrayVars[arr]; }
                                        else { url = url + element.name + '='; }
                                    }
                                }
                                else { url = url + element.name + '=' + element.value; }
                            }
                        });

                        if (!isNullOrEmpty($(filter).attr('href'))) { $(filter).attr('href', url); }
                        else if (!isNullOrEmpty($(filter).attr('tabajaxUrl'))) { $(filter).attr('tabajaxUrl', url); }
                        else if (!isNullOrEmpty($(filter).attr('tabajax-url'))) { $(filter).attr('tabajax-url', url); }
                        else if (!isNullOrEmpty($(filter).attr('action'))) { $(filter).attr('action', url); }

                        if (elemLoad === true) {
                            AjaxLoad(html, url, typeResult);
                        }
                    }
                });

            }
        }
    }
}


$(document).ready(function () {
    var typingTimer;

    // --- Déclenche TabajaxFilter lorsque un changement est détécté ---
    // - Input simple, Textarea simple
    // === Updated : 07/02/2020 à 13:50 - PASSE Valentin ===
    $('body').on("keyup", "input[tabajaxFilter]:not([switch]):not([disabled]):not([datepicker]):not([datetimepicker]):not([type='checkbox']),textarea[tabajaxFilter]:not([disabled]):not([editor])", function () {
        var elem = $(this);
        var times = 200;
        if (elem.hasAttrTabajaxFilterTimes() && !isNullOrEmpty(elem.attrTabajaxFilterTimes())) { times = elem.attrTabajaxFilterTimes(); }
        clearTimeout(typingTimer);
        typingTimer = setTimeout(function () {
            if ($(elem).val() !== $(elem).attr('valueDefault')) {
                $(elem).attr('value', $(elem).val());
                $(elem).attr('valueDefault', $(elem).val());

                TabajaxFilter($(elem).attrTabajaxFilter(), $(elem).attrTabajaxFilterLoad());
            }
        }, times);
    });
    $('body').on("keydown", "input[tabajaxFilter]:not([switch]):not([disabled]):not([datepicker]):not([datetimepicker]):not([type='checkbox']),textarea[tabajaxFilter]:not([disabled]):not([editor])", function () {
        clearTimeout(typingTimer);
    });
    // --- Déclenche TabajaxFilter lorsque un changement est détécté ---
    // - Input simple, Textarea simple
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxFilter]:not([switch]):not([disabled]):not([datepicker]):not([datetimepicker]):not([type='checkbox']),textarea[tabajaxFilter]:not([disabled]):not([editor])", function () {
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Input Hidden
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxFilter]:not([disabled]):hidden", function () {
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Input DatePicker
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxFilter][datepicker]:not([disabled]),input[tabajaxFilter][timepicker]:not([disabled]),input[tabajaxFilter][datetimepicker]:not([disabled]),input[tabajaxFilter][type='date']:not([disabled]),input[tabajaxFilter][type='datetime']:not([disabled])", function () {
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('valueDefault', $(this).val());

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Button
    // === Updated : 29/01/2021 à 16:30 - PASSE Valentin ===
    $('body').on("click", "button[tabajaxFilter]:not([disabled]),a[tabajaxFilter]:not([disabled]),li[tabajaxFilter]:not([disabled])", function () {
        if ($(this).attr('value') !== $(this).attr('valueDefault')) {
            $(this).attr('valueDefault', $(this).attr('value'));

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Textarea editor
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("focusout", "textarea[tabajaxFilter][editor]:not([disabled])", function () {
        if (decodeURIComponent($(this).val()) !== decodeURIComponent($(this).attr('valueDefault'))) {
            $(this).attr('valueDefault', decodeURIComponent($(this).val()));

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Select simple
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "select[tabajaxFilter]:not([disabled])", function () {
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Input checkbox simple
    // === Updated : 07/02/2020 à 10:00 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxFilter][type='checkbox']:not([disabled])", function () {
        var check = 'false';
        if ($(this).is(":checked")) { check = 'true'; }

        if ((isBooleanVirtual($(this).attr('value')) || isUndefined($(this).attr('value')) || isNullOrEmpty($(this).attr('value'))) && check !== $(this).attr('valueDefault')) {
            $(this).attr('value', check);
            $(this).attr('valueDefault', check);

            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
        else if (!isUndefined($(this).attr('value')) && !isNullOrEmpty($(this).attr('value')) && check !== $(this).attr('valueDefault')) {
            $(this).attr('valuecheck', check); // valuecheck signifie qu'on choisi sa valeur si le :checked est true sinon ne renvoi rien
            TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
        }
    });
    // - Input radio simple
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxFilter][type='radio']:not([disabled])", function () {
        if ($(this).is(":checked")) { TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad()); }
    });
    // PagedList
    // === Updated : 21/06/2019 à 12:20 - PASSE Valentin ===
    $('body').on('click', '.pagination-container[tabajaxFilter] .pagination a', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);

        var page = getUrlVars($(this).attr('href'), 'page');

        if (!isNullOrEmpty(page)) {
            var div = $(this).closest('.pagination-container');
            $(div).attr('name', 'page');
            $(div).attr('value', page);

            TabajaxFilter($(div).attrTabajaxFilter(), $(div).attrTabajaxFilterLoad());
        }
    });
});
// --- Génère un message HTML sur la page  ---
async function TabAjaxMessage(message) {
    $('#MessageResult').append(message);
    await TabajaxDisplayMessage();
}
// --- Génère un message HTML sur la page  ---
async function TabAjaxErrorMessage(message) {
    var currentdate = new Date();
    var messageError = "<div class='toast' role='alert' data-autohide='false'>";
    messageError += "<div class='toast-header bg-danger'>";
    messageError += "<i class='fa fa-exclamation-triangle mr-2'></i>";
    messageError += "<strong class='mr-auto'>Erreur</strong>";
    messageError += "<small class='text-muted color-blanc'>" + currentdate.getHours() + ":"
        + currentdate.getMinutes() + ":"
        + currentdate.getSeconds() + "</small>";
    messageError += "<button type='button' class='ml-2 mb-1 close' data-dismiss='toast' aria-label='Close'>";
    //messageError += "<span style='font-size: 1em;' aria-hidden='true'>&times;</span>";
    messageError += "<span class='fa-stack' aria-hidden='true'><i class='fa fa-circle fa-stack-2x'></i><span id='timer' class='fa fa-stack-1x fa-inverse'>5</span></span>";
    messageError += "</button>";
    messageError += "</div>";
    messageError += "<div class='toast-body'>";
    messageError += message;
    messageError += "</div>";
    messageError += "</div>";
    $('#MessageResult').append(messageError);
    await TabajaxDisplayMessage();
}
// --- Génère un message HTML sur la page  ---
async function TabAjaxSuccessMessage(message) {
    var currentdate = new Date();
    var messageSuccess = "<div class='toast' role='alert' data-autohide='false'>";
    messageSuccess += "<div class='toast-header bg-success'>";
    messageSuccess += "<i class='fa fa-check mr-2'></i>";
    messageSuccess += "<strong class='mr-auto'>Succes</strong>";
    messageSuccess += "<small class='text-muted color-blanc'>" + currentdate.getHours() + ":"
        + currentdate.getMinutes() + ":"
        + currentdate.getSeconds() + "</small>";
    messageSuccess += "<button type='button' class='ml-2 mb-1 close' data-dismiss='toast' aria-label='Close'>";
    //messageSuccess += "<span style='font-size: 1em;' aria-hidden='true'>&times;</span>";
    messageSuccess += "<span class='fa-stack' aria-hidden='true'><i class='fa fa-circle fa-stack-2x'></i><span id='timer' class='fa fa-stack-1x fa-inverse'>5</span></span>";
    messageSuccess += "</button>";
    messageSuccess += "</div>";
    messageSuccess += "<div class='toast-body'>";
    messageSuccess += message;
    messageSuccess += "</div>";
    messageSuccess += "</div>";
    $('#MessageResult').append(messageSuccess);
    await TabajaxDisplayMessage();
}
function TabajaxDisplayMessage() {
    $('#MessageResult').find('div.toast').each(function (i) {
        var elem = $(this);
        $(elem).toast('show');

        $(this).on('shown.bs.toast', function () {
            if ($(this).attr('hide') !== 'false') {
                var i = 4;
                var interval = setInterval(function (e) {
                    $(e).find('#timer').html(i);
                    i--;
                }, 1000, this);
                var timer = $(this).find('#timer');
                setTimeout(function () {
                    clearInterval(interval);
                    $(timer).html('');
                    $(timer).addClass('fa-close');
                    $(elem).toast('hide');
                }, 5000);
            }
        });

        $(this).on('hide.bs.toast', function () {
            if ($(elem).is(':hover') && $(elem).attr('hide') !== 'false') {
                $(elem).attr('hide', 'false');
                $(elem).attr('style', 'opacity:1;display:block;');
                $(elem).toast('show');
            }
            else {
                $(elem).remove();
            }
        });
    });
}
function TabajaxModalClose(selector) {
    if (isNullOrEmpty(selector)) {
        selector = '.modal';
    }
    // Cache tous les modal
    $(selector + ':visible').each(function (index) {
        $(this).modal('hide');
    });
    $('.modal-backdrop').remove();
}

$(document).ready(function () {

    // --- Clique Modal en Ajax  ---
    // - href/url/data-url -
    // - [data-target/html] -
    // === Updated : 24/05/2019 à 16:10 - PASSE Valentin ===
    // - url -
    $('body').on('click', '[tabajaxModal=true],[tabajaxModal=True],[tabajax-Modal=true],[tabajax-Modal=True],.click-modal', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);

        TabAjaxLoaderBegin();

        // Récupère le lien Url
        var url = $(this).attrTabajaxUrl();

        // Définis la target si cela ne concerne pas un modal générique
        var html = $(this).attrTabajaxHtml(false);
        if ($(this).hasAttr('data-target')) { html = $(this).attr('data-target'); }

        TabajaxChangeUrl(this);
        TabajaxChangeParameter(this);

        if (!isNullOrEmpty(url) && !$(html).length) {
            $.ajax({
                url: url,
                success: function (result) {

                    resultHtml = null;
                    message = null;

                    if (!isUndefined(result)) {
                        if (!isUndefined(result.result)) {
                            resultHtml = result.result;
                        }
                        if (!isUndefined(result.message)) {
                            message = result.message;
                        }
                        if (isNull(message) && isNull(resultHtml)) {
                            resultHtml = result;
                        }
                    }

                    if (!isNull(resultHtml)) {
                        var modal = undefined;

                        if (isNullOrEmpty(html)) {
                            if ($('#Modal .modal:visible').length) {
                                $('#Modal').append(resultHtml);
                                modal = $(resultHtml).first();
                            }
                            else {
                                $('#Modal').html(resultHtml);
                                modal = $('#Modal').children('.modal').first();
                            }
                        }
                        else {
                            if (isElement(html) || isElement(document.getElementById(html))) {
                                if (isElement(document.getElementById(html))) { html = '#' + html; }
                                $(html).replaceWith(resultHtml);
                                modal = $(html);
                            }
                        }

                        if (isElement(modal)) {
                            LibraryReload($(modal));
                            TabajaxReady($(modal));

                            // A modifier par la suite
                            if (TabAjaxFilterByKey('bloquer') !== undefined) {
                                TabAjaxBloquer(TabAjaxFilterByKey('bloquer'));
                            }

                            $(modal).modal('show');
                        }
                    }

                    if (message !== null) { TabAjaxMessage(message); }

                    Reset();
                },
                error: function (result) {
                    if (!isUndefined(result) && !isUndefined(result.responseJSON) && !isUndefined(result.responseJSON.message)) { TabAjaxMessage(result.responseJSON.message); }
                    else { TabAjaxErrorMessage(result.responseText); }
                    console.log('Erreur d\'action : ' + result.responseText);
                    Reset();
                }
            });
        }
        else {
            if ($(html).length) {
                $(html).modal('show');
            }
            TabAjaxLoaderEnd();
        }
    });

});
// --- Fonction qui permet de regénérer le contenu via l'attribut TabajaxReload grâce à un TabajaxAction ou un TabajaxSubmit ---
// - html/id -
// - href -
// - replace -
// (selector est un tableau de String, exemple : IDElement1,IDElement2)
// === Updated : 11/07/2019 à 13:30 - PASSE Valentin ===
function TabajaxReload(selector) {
    if (!isNullOrEmpty(selector)) {
        var arrayReload = selector.split(',');

        for (iReload = 0; iReload < arrayReload.length; iReload++) {

            // Récupère l'élèment du DOM
            var elemReload = undefined;
            if (isElement(arrayReload[iReload])) {
                elemReload = $(arrayReload[iReload]);
            }
            else if (isElement(document.getElementById(arrayReload[iReload]))) {
                elemReload = $('#' + arrayReload[iReload]);
            }

            if (!isUndefined(elemReload)) {

                TabajaxFilter(arrayReload[iReload], false);

                $(elemReload).each(function () {
                    var reload = $(this);

                    // Récupère l'element de sortie (selector)
                    var html = undefined;
                    if ($(reload).hasAttrTabajaxHtml(false)) { html = $(reload).attrTabajaxHtml(false); }
                    else if ($(reload).hasAttrTabajaxBloc()) { html = $(reload).attrTabajaxBloc(); }
                    else html = $(reload).attrTabajaxHtml();

                    // Récupère le lien Url
                    var url = $(reload).attrTabajaxUrl();

                    // Récupère le type de résultat
                    var typeResult = $(reload).attrTabajaxResult();

                    // Charge l'ajax avec les paramètres récupérer
                    AjaxLoad(html, url, typeResult);
                });
            }

        }
    }
}
// --- Fonction qui permet de générer le contenu via les filtres de TabajaxSubmit ---
// - id -
// - action -
// === Updated : 11/07/2019 à 14:30 - PASSE Valentin ===
function TabajaxSubmitAuto(selector) {
    var elemSubmitAuto = undefined;
    if (isString(selector)) {
        if (isElement(selector)) {
            elemSubmitAuto = $(selector);
        }
        else if (isElement(document.getElementById(selector))) {
            elemSubmitAuto = $('#' + selector)
        }
    }
    else { elemSubmitAuto = selector; }

    if (isElement(elemSubmitAuto)) {

        var id = $(elemSubmitAuto).attr('id');
        var url = $(elemSubmitAuto).attr('action');

        if (!isNullOrEmpty(id) && !isNullOrEmpty(url) && $('[tabajaxSubmit="' + id + '"]').length) {
            // Commence par '?' avec le "start = true"
            var start = true;

            // Récupere toutes les variables de l'URL
            var vars = getUrlVars(url);

            // Supprime les variables dans l'URL à partir de '?'
            url = getUrlWithoutVars(url);

            // Supprime toutes les variables dans l'url qui bénificie d'un input filter dans le DOM
            var varsSubmit = vars;
            vars.forEach(function (element) {
                if ($('[tabajaxSubmit*="' + $(elemSubmitAuto).attr('id') + '"][name="' + element.name + '"],[tabajax-submit*="' + $(elemSubmitAuto).attr('id') + '"][name="' + element.name + '"]').length) {
                    varsSubmit = varsSubmit.filter(function (el, index, arr) {
                        return el.name !== element.name;
                    });
                }
            });
            vars = varsSubmit;

            // Cherche tous les inputs, select et autres éléments de formulaires
            $('main').find('[tabajaxSubmit="' + id + '"][name]').each(function () {
                var name = $(this).attr('name');
                var value = $(this).val();
                if (isNullOrEmpty(value)) { value = $(this).attr('value'); }

                if ($(this).hasAttr('datepicker') || $(this).hasAttr('dateTimepicker')) {
                    var date = new Date(ParseDate($(this).val(), '/'));
                    if (isDate(date)) {
                        value = dateFormat(date, "mm/dd/yyyy HH:MM:ss");
                    }
                    else { value = undefined; }
                }
                else if ($(this).is('[type="checkbox"]')) {
                    // A Checker il existe valuecheck, si oui, remplacer le boolean par la valeur et supprimer si le check est null
                    if ($(this).hasAttr('valuecheck')) {
                        if ($(this).attr('valueCheck') !== 'true') {
                            value = undefined;
                        }
                    }
                    else {
                        if (value === 'on') { value = undefined; }
                        else if ($(this).is(":checked")) { value = 'true'; }
                        else { value = 'false'; }
                    }
                }
                else if ($(this).is('[type=radio]') && !$(this).is(':checked')) {
                    value = undefined;
                }

                if (vars.indexOf(name) !== -1) {
                    if (!isNullOrEmpty(value) && value !== vars[name]) {
                        if (!isNullOrEmpty(vars[name])) {
                            let obj = {
                                'name': name,
                                'value': value
                            }
                            vars.push(obj);
                        }
                        else { vars.find(x => x.name === name).value = value; }
                    }
                }
                else {
                    let obj = {
                        'name': name,
                        'value': value
                    }
                    vars.push(obj);
                }
            });

            // Ajoute à l'url tous les variables
            vars.forEach(function (element) {
                if (!isNullOrEmpty(element.value)) {
                    if (start === true) {
                        url = url + '?';
                        start = false;
                    }
                    else { url = url + '&'; }

                    if (isArray(element.value)) {

                        var arrayVarsStart = true;
                        var arrayVars = element.value;
                        for (var arr in arrayVars) {
                            if (!arrayVarsStart) { url = url + '&'; }
                            else { arrayVarsStart = false; }

                            if (!isNullOrEmpty(arrayVars[arr])) { url = url + element.name + '=' + arrayVars[arr]; }
                            else { url = url + element.name + '='; }
                        }
                    }
                    else { url = url + element.name + '=' + element.value; }
                }
            });

            $(elemSubmitAuto).attr('action', url);
        }

    }
}
// --- Fonction qui permet d'éxecuter TabajaxSubmit en fonction du formulaire ---
// - element ($(this)) -
// === Updated : 07/02/2020 à 10:10 - PASSE Valentin ===
function executeSubmit(element) {
    if (isElement(element)) {
        if ($(element).hasAttr('TabajaxSubmit')) { $('form[id="' + $(element).attr('TabajaxSubmit') + '"').submit(); }
        else { $(element).closest('form').submit(); }
    }
}

$(document).ready(function () {
    // --- Clique Submit en Ajax  ---
    // - form -
    // - [html] -
    // - [Reload] -
    // === Updated : 11/07/2019 à 14:45 - PASSE Valentin ===
    $('body').on('submit', '[tabajaxSubmit=true],[tabajaxSubmit=True],[tabajax-submit=true],[tabajax-submit=True]', function (event) {
        event.preventDefault ? event.preventDefault() : (event.returnValue = false);

        // Récupère l'element de sortie (selector)
        var html = $(this).attrTabajaxHtml(false);
        if (isUndefined(html)) { html = ''; }

        // Récupère l'element de loading (selector)
        var loading = $(this).attrTabajaxLoading(false);
        if (isUndefined(loading)) { loading = html; }

        // TabAjaxLoaderBegin : Demarre le Loader
        TabAjaxLoaderBegin(loading);

        // Récupère le type de résultat
        var typeResult = $(this).attrTabajaxResult();

        // Cache tous les modal
        var modal = $(this).closest('.modal:visible');
        if ($(modal).length) { TabajaxModalClose('#' + $(modal).attr('id')) }
        else { TabajaxModalClose(); }

        // Définis les Reload s'il y en a
        var reload = $(this).attrTabajaxReload();

        //Si TabajaxFilter existe, cela signifie qu'il s'agit de faire un TabajaxFilter après l'appel ajax
        var filter = $(this).attrTabajaxFilter();
        var filterLoad = $(this).attrTabajaxFilterLoad();

        TabajaxChangeUrl(this);
        TabajaxChangeParameter(this);

        // Génère l'url de l'action
        TabajaxSubmitAuto(this);

        var dataSerialize = $(this).serializeArray();

        //if ($(this).validate()) {
        $.ajax({
            url: this.action,
            type: this.method,
            //dataType: 'JSON',  
            data: dataSerialize,
            success: function (result) {
                AjaxLoadSuccess(result, html, typeResult, reload, filter, filterLoad);
            },
            error: function (result) {
                AjaxLoadError(result, html, typeResult, reload, filter, filterLoad);
            }
        });

    });


    //// - Button submit 
    //// === Updated : 19/06/2019 à 15:00 - PASSE Valentin ===
    //$('body').on("click", "button[tabajaxFilter]:not([disabled]),a[tabajaxFilter]:not([disabled])", function () {
    //    if ($(this).attr('value') !== $(this).attr('valueDefault')) {
    //        $(this).attr('valueDefault', $(this).attr('value'));

    //        TabajaxFilter($(this).attrTabajaxFilter(), $(this).attrTabajaxFilterLoad());
    //    }
    //});

    // - Action submit 
    // === Updated : 25/11/2020 à 10:32 - PASSE Valentin ===
    $('body').on("click", "a[tabajaxSubmit]:not([disabled]),a[tabajax-submit]:not([disabled]),button[tabajaxSubmit]:not([disabled]),button[tabajax-submit]:not([disabled]),td[tabajaxSubmit]:not([disabled]),td[tabajax-submit]:not([disabled]),li[tabajaxSubmit]:not([disabled]),li[tabajax-submit]:not([disabled])", function () {
        var form = $(this).attrTabajaxSubmit();

        if (form === 'true' || form === 'True') {
            TabajaxChangeParameter(this);
            $(this).closest('form').submit();
        }
        else if (form !== 'false' && form !== 'False' && isElement(form)) {
            TabajaxChangeParameter(this);
            $(form).submit();
        }
    });

    // --- Sumbit Auto - lorsque un changement est détécté ---
    // - Input simple, Textarea simple
    $('body').on("focusout", "input[tabajaxUpdateAuto]:not([switch]):not([type='checkbox']):not([disabled]):not([datepicker]):not([datetimepicker]),textarea[tabajaxUpdateAuto]:not([disabled]):not([editor])", function () {
        //debugger;
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            executeSubmit($(this));
            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
    });
    // --- Déclenche TabajaxFilter lorsque un changement est détécté ---
    // - Input simple, Textarea simple
    // === Updated : 11/06/2019 à 13:20 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxUpdateAuto]:not([switch]):not([type='checkbox']):not([disabled]):not([datepicker]):not([datetimepicker]),textarea[tabajaxUpdateAuto]:not([disabled]):not([editor])", function () {
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            executeSubmit($(this));
            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
    });
    // - Input DatePicker
    $('body').on("change", "input[tabajaxUpdateAuto][datepicker]:not([switch]):not([disabled]),input[tabajaxUpdateAuto][datetimepicker]:not([switch]):not([disabled]),input[type='date']:not([switch]):not([disabled]),input[type='datetime'][datetimepicker]:not([switch]):not([disabled])", function () {
        //debugger;
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            executeSubmit($(this));
            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
    });
    // - Textarea editor
    $('body').on("focusout", "textarea[tabajaxUpdateAuto][editor]:not([disabled])", function () {
        //debugger;
        if (decodeURIComponent($(this).val()) !== decodeURIComponent($(this).attr('valueDefault'))) {
            $(this).attr('value', decodeURIComponent($(this).val()));
            $(this).attr('valueDefault', decodeURIComponent($(this).val()));
            executeSubmit($(this));

            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
    });
    // - Select simple
    $('body').on("change", "select[tabajaxUpdateAuto]:not([disabled])", function () {
        //debugger;
        if ($(this).val() !== $(this).attr('valueDefault')) {
            $(this).attr('value', $(this).val());
            $(this).attr('valueDefault', $(this).val());
            executeSubmit($(this));
            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
    });
    // - Input checkbox simple
    // === Updated : 07/02/2020 à 10:00 - PASSE Valentin ===
    $('body').on("change", "input[tabajaxUpdateAuto][type='checkbox']:not([disabled])", function () {
        //debugger;
        var check = 'false';
        if ($(this).is(":checked")) { check = 'true'; }

        if ((isBooleanVirtual($(this).attr('value')) || isUndefined($(this).attr('value')) || isNullOrEmpty($(this).attr('value'))) && check !== $(this).attr('valueDefault')) {
            $(this).attr('value', check);
            $(this).attr('valueDefault', check);

            executeSubmit($(this));
            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
        else if (!isUndefined($(this).attr('value')) && !isNullOrEmpty($(this).attr('value')) && check !== $(this).attr('valueDefault')) {
            $(this).attr('valuecheck', check); // valuecheck signifie qu'on choisi sa valeur si le :checked est true sinon ne renvoi rien
            executeSubmit($(this));
            //if ($(this).hasAttr('TabajaxSubmit')) { $('form[id="' + $(this).attr('TabajaxSubmit') + '"').submit(); }
            //else { $(this).closest('form').submit(); }
        }
    });
});
$.fn.hasAttr = function (name) {
    return this.attr(name) !== undefined;
};
// for case insensitive name attribute contains selector
$.expr[':'].filter = function (node, stackIndex, properties) {
    if (node.attributes.filter !== null && node.attributes.filter !== undefined) {
        var value = node.attributes['filter'].value;
        value = value.toLowerCase();
        return value.toLowerCase() === properties[3];
    }
    else return false;
};
(function ($) {
    $.fn.getAttributes = function () {
        var attributes = {};

        if (this.length) {
            $.each(this[0].attributes, function (index, attr) {
                attributes[attr.name] = attr.value;
            });
        }

        return attributes;
    };
})(jQuery);
function resizeIframe(obj, minHeight) {
    var iframe = obj.contentDocument;
    var height = iframe.body.offsetHeight;
    if (isNumber(minHeight) && minHeight > height) { height = minHeight; }
    obj.style.height = height + "px";
}

// =====================================================================
// ========================= FONCTIONS FILTERS =========================
// =====================================================================


// --- Retourne la valeur du filtre qui est en parametre ---
function TabAjaxFilterByKey(key) {
    return $('input[name^="filter"][filter="' + key + '"]').val();
}
// --- Change la valeur du filtre avec la nouvelle valeur inscrite en parametre ---
// Retourne la valeur finale (ou vide si jamais il y a la valeur qui est incorrecte)
function TabAjaxUpdateFilter(key, value) {
    if (key === undefined || key === '' || key === 'function ' + key + '()') {
        key = '';
    }
    if (value === undefined || value === '' || value === 'function ' + value + '()') {
        value = '';
    }
    $('input[name^="filter"]:filter("' + key.toLowerCase() + '")').val(value);

    return value;
}
(function ($) {
    $.fn.TabAjaxUpdateFilter = function () {
        var data = $(this).getAttributes();
        for (var filter in data) {
            if (filter.startsWith('tabajax-data-')) {
                TabAjaxUpdateFilter(filter.substr(13), data[filter]);
            }
        }
    };
})(jQuery);

// =====================================================================
// =========================== FONCTIONS URL ===========================
// =====================================================================

//// --- Change l'url de la page ---
//// Avertissement au retour en arrière (le prend en compte dans le navigateur)
//function ChangeUrl(page, url) {
//    if (typeof (history.pushState) !== "undefined") {
//        var obj = { Page: page, Url: url };
//        history.pushState(null, obj.Page, obj.Url);
//    } else {
//        alert("Browser does not support HTML5.");
//    }
//}
// --- Change l'url avec l'ID et l'onglet selectionné ---
function TabAjaxUrl() {
    var urlHistory = window.location.href.split('?')[0];
    // Check si l'url ne possède pas d'ID
    // else si l'url possède un ID autre que le sien
    if (urlHistory.split('/')[urlHistory.split('/').length - 1] !== TabAjaxFilterByKey('id')) {
        var numeric = $.isNumeric(urlHistory.split('/')[urlHistory.split('/').length - 1]);
        if (!numeric) {
            if (TabAjaxFilterByKey('tab') !== '' || TabAjaxFilterByKey('tab') !== undefined) {
                window.history.pushState("", "", urlHistory + '?id=' + TabAjaxFilterByKey('id') + '&tab=' + TabAjaxFilterByKey('tab'));
            }
            else {
                window.history.pushState("", "", urlHistory + '?id=' + TabAjaxFilterByKey('id'));
            }
        }
        else {
            if (TabAjaxFilterByKey('tab') !== '' || TabAjaxFilterByKey('tab') !== undefined) {
                window.history.pushState("", "", urlHistory.replace('/' + urlHistory.split('/')[urlHistory.split('/').length - 1], '?id=' + TabAjaxFilterByKey('id') + '&tab=' + TabAjaxFilterByKey('tab')));
            }
            else {
                window.history.pushState("", "", urlHistory.replace('/' + urlHistory.split('/')[urlHistory.split('/').length - 1], '?id=' + TabAjaxFilterByKey('id')));
            }
        }
    }
}
// --- Récupère l'url sans ces paramètres ---
// Exemple : getUrlWithoutVars(url)
function getUrlWithoutVars(url) {
    if (!isNullOrEmpty(url) && url.indexOf("?") !== -1) {
        url = url.substring(0, url.indexOf('?'));
    }
    return url;
}
// --- Récupère la variable dans l'url qui correspond à son nom ---
// Exemple : getUrlVars(url, variable)
function getUrlVars(url, name) {
    var vars = [];
    var hashes;
    if (isNullOrEmpty(url)) {
        hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    } else if (url.indexOf("?") !== -1) {
        hashes = url.slice(url.indexOf('?') + 1).split('&');
    }
    else return vars;

    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        var obj = {
            'name': hash[0],
            'value': hash[1]
        };
        vars.push(obj);
    }

    if (!isNullOrEmpty(name)) { return vars.find(x => x.name === name).value; }
    else { return vars; }
}

// --- Renvoie une Url avec tous les champs masquer de la page qui ont "filter" comme paramètre ---
// Avertissement : Pour une amélioration, faire améliorer l'url pour qu'elle prenne en compte "?..."
// Champ name="filter" : Donnée simple
// Champ name="filter[]" : Données composées
function TabAjaxUrlByFilters(url, isExport) {
    var exp = (isExport) ? '[export="True"]' : '';
    var filters = new Array();
    $('input[name="filter"]' + exp).each(function (index, el) {
        filters[$(el).attr('filter')] = $(el).val();
    });
    for (var filter1 in filters) {
        if (filters[filter1] !== undefined && filters[filter1] !== '') {
            url = url + '&' + filter1 + '=' + filters[filter1];
        }
        else if (isExport && $('input[name="filter"][filter="' + filter1 + '"]').attr('isnull') === 'True') {
            url = url + '&' + filter1 + ':isnull=true';
        }
    }

    var filtersArray = new Array();
    $('input[name="filter[]"]' + exp).each(function (index, el) {
        filtersArray[$(el).attr('filter')] = $(el).val();
    });
    for (var filter2 in filtersArray) {
        if (filtersArray[filter2] !== undefined && filtersArray[filter2] !== '') {
            var arrayList = filtersArray[filter2].split(',');
            for (var arr in arrayList) {
                if (arrayList[arr] !== '' && arrayList[arr] !== undefined) {
                    url = url + '&' + filter2 + '=' + arrayList[arr];
                }
            }
        }
        else if (isExport && $('input[name="filter[]"][filter="' + filter2 + '"]').attr('isnull') === 'True') {
            url = url + '&' + filter2 + ':isnull=true';
        }
    }

    return url;
}

// =====================================================================
// ========================= FONCTIONS AUTRES ==========================
// =====================================================================

// --- Ajoute une class au body de la view pour un style de chargement en cours visible par l'utilisateur ---
function TabAjaxLoaderBegin(selector) {
    if (!isNullOrEmpty(selector) && isElement($(selector)) && !$(selector).hasClass("ajax-preloader")) {
        $(selector).addClass("ajax-preloader");
        $('#loading').css('display', 'inline-block');
    }
    else if (!$('#page').hasClass("ajax-preloader")) {
        $('#page').addClass("ajax-preloader");
        $('#loading').css('display', 'inline-block');
    }
}
// --- Supprime une class au body de la view pour un style de chargement en cours visible par l'utilisateur ---
function TabAjaxLoaderEnd(selector) {
    if (!isNullOrEmpty(selector) && isElement($(selector)) && $(selector).hasClass("ajax-preloader")) {
        $(selector).removeClass("ajax-preloader");

        if ($('.ajax-preloader').length == 0) {
            $('#loading').hide();
        }
    }
    else {
        $('.ajax-preloader').each(function () {
            $(this).removeClass("ajax-preloader");
        });

        $('#loading').hide();
    }
}
// --- Réinitialise toutes les commandes visible par l'utilisateur ---
function Reset(selector) {
    if (!isNullOrEmpty(selector) && isElement($(selector))) {
        TabAjaxLoaderEnd(selector)
        $(selector).find('a').blur();
        $(selector).find('button').blur();
        $(selector).find('select').blur();
        $(selector).find('[data-toggle="tooltip"]').tooltip();
        $(selector).find('.tooltip').hide();
        $(selector).find('[data-toggle="popover"]').popover();
        $(selector).find('.popover').hide();
    }
    else {
        TabAjaxLoaderEnd();
        $('a').blur();
        $('button').blur();
        $('select').blur();
        $('[data-toggle="tooltip"]').tooltip();
        $('.tooltip').hide();
        $('[data-toggle="popover"]').popover();
        $('.popover').hide();
    }
}